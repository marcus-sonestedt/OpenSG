/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class MultiLightChunk
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGMULTILIGHTCHUNKBASE_H_
#define _OSGMULTILIGHTCHUNKBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGSystemDef.h"

//#include "OSGBaseTypes.h"

#include "OSGShaderStorageBufferObjStdLayoutChunk.h" // Parent

#include "OSGSysFields.h"               // HasWorldToLightSpaceMatrix type
#include "OSGVecFields.h"               // Position type
#include "OSGBaseFields.h"              // Color type
#include "OSGNodeFields.h"              // Beacon type
#include "OSGMathFields.h"              // BeaconMatrix type

#include "OSGMultiLightChunkFields.h"

OSG_BEGIN_NAMESPACE


class MultiLightChunk;

//! \brief MultiLightChunk Base Class.

class OSG_SYSTEM_DLLMAPPING MultiLightChunkBase : public ShaderStorageBufferObjStdLayoutChunk
{
  public:

    typedef ShaderStorageBufferObjStdLayoutChunk Inherited;
    typedef ShaderStorageBufferObjStdLayoutChunk ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(MultiLightChunk);

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        HasWorldToLightSpaceMatrixFieldId = Inherited::NextFieldId,
        HasLightToWorldSpaceMatrixFieldId = HasWorldToLightSpaceMatrixFieldId + 1,
        HasEyeToLightSpaceMatrixFieldId = HasLightToWorldSpaceMatrixFieldId + 1,
        HasLightToEyeSpaceMatrixFieldId = HasEyeToLightSpaceMatrixFieldId + 1,
        HasLightPerspectiveMatrixFieldId = HasLightToEyeSpaceMatrixFieldId + 1,
        HasInvLightPerspectiveMatrixFieldId = HasLightPerspectiveMatrixFieldId + 1,
        HasColorFieldId = HasInvLightPerspectiveMatrixFieldId + 1,
        HasIntensityFieldId = HasColorFieldId + 1,
        HasSeparateIntensitiesFieldId = HasIntensityFieldId + 1,
        HasAttenuationFieldId = HasSeparateIntensitiesFieldId + 1,
        AutoCalcRangesFieldId = HasAttenuationFieldId + 1,
        HasRangeCutOnFieldId = AutoCalcRangesFieldId + 1,
        HasRangeCutOffFieldId = HasRangeCutOnFieldId + 1,
        HasRangeNearZoneFieldId = HasRangeCutOffFieldId + 1,
        HasRangeFarZoneFieldId = HasRangeNearZoneFieldId + 1,
        HasCosSpotlightAngleFieldId = HasRangeFarZoneFieldId + 1,
        HasSpotlightAngleFieldId = HasCosSpotlightAngleFieldId + 1,
        HasSpotExponentFieldId = HasSpotlightAngleFieldId + 1,
        HasCinemaLightFieldId = HasSpotExponentFieldId + 1,
        PositionFieldId = HasCinemaLightFieldId + 1,
        DirectionFieldId = PositionFieldId + 1,
        ColorFieldId = DirectionFieldId + 1,
        IntensityFieldId = ColorFieldId + 1,
        AmbientIntensityFieldId = IntensityFieldId + 1,
        DiffuseIntensityFieldId = AmbientIntensityFieldId + 1,
        SpecularIntensityFieldId = DiffuseIntensityFieldId + 1,
        AttenuationFieldId = SpecularIntensityFieldId + 1,
        SpotlightAngleFieldId = AttenuationFieldId + 1,
        SpotExponentFieldId = SpotlightAngleFieldId + 1,
        InnerSuperEllipsesWidthFieldId = SpotExponentFieldId + 1,
        InnerSuperEllipsesHeightFieldId = InnerSuperEllipsesWidthFieldId + 1,
        OuterSuperEllipsesWidthFieldId = InnerSuperEllipsesHeightFieldId + 1,
        OuterSuperEllipsesHeightFieldId = OuterSuperEllipsesWidthFieldId + 1,
        SuperEllipsesRoundnessFieldId = OuterSuperEllipsesHeightFieldId + 1,
        SuperEllipsesTwistFieldId = SuperEllipsesRoundnessFieldId + 1,
        RangeCutOnFieldId = SuperEllipsesTwistFieldId + 1,
        RangeCutOffFieldId = RangeCutOnFieldId + 1,
        RangeNearZoneFieldId = RangeCutOffFieldId + 1,
        RangeFarZoneFieldId = RangeNearZoneFieldId + 1,
        TypeFieldId = RangeFarZoneFieldId + 1,
        EnabledFieldId = TypeFieldId + 1,
        BeaconFieldId = EnabledFieldId + 1,
        BeaconMatrixFieldId = BeaconFieldId + 1,
        EyeSpaceFieldId = BeaconMatrixFieldId + 1,
        LastCamNearFieldId = EyeSpaceFieldId + 1,
        LastCamFarFieldId = LastCamNearFieldId + 1,
        LastCamToWorldFieldId = LastCamFarFieldId + 1,
        LightBlockNameFieldId = LastCamToWorldFieldId + 1,
        LightVariableNameFieldId = LightBlockNameFieldId + 1,
        NextFieldId = LightVariableNameFieldId + 1
    };

    static const OSG::BitVector HasWorldToLightSpaceMatrixFieldMask =
        (TypeTraits<BitVector>::One << HasWorldToLightSpaceMatrixFieldId);
    static const OSG::BitVector HasLightToWorldSpaceMatrixFieldMask =
        (TypeTraits<BitVector>::One << HasLightToWorldSpaceMatrixFieldId);
    static const OSG::BitVector HasEyeToLightSpaceMatrixFieldMask =
        (TypeTraits<BitVector>::One << HasEyeToLightSpaceMatrixFieldId);
    static const OSG::BitVector HasLightToEyeSpaceMatrixFieldMask =
        (TypeTraits<BitVector>::One << HasLightToEyeSpaceMatrixFieldId);
    static const OSG::BitVector HasLightPerspectiveMatrixFieldMask =
        (TypeTraits<BitVector>::One << HasLightPerspectiveMatrixFieldId);
    static const OSG::BitVector HasInvLightPerspectiveMatrixFieldMask =
        (TypeTraits<BitVector>::One << HasInvLightPerspectiveMatrixFieldId);
    static const OSG::BitVector HasColorFieldMask =
        (TypeTraits<BitVector>::One << HasColorFieldId);
    static const OSG::BitVector HasIntensityFieldMask =
        (TypeTraits<BitVector>::One << HasIntensityFieldId);
    static const OSG::BitVector HasSeparateIntensitiesFieldMask =
        (TypeTraits<BitVector>::One << HasSeparateIntensitiesFieldId);
    static const OSG::BitVector HasAttenuationFieldMask =
        (TypeTraits<BitVector>::One << HasAttenuationFieldId);
    static const OSG::BitVector AutoCalcRangesFieldMask =
        (TypeTraits<BitVector>::One << AutoCalcRangesFieldId);
    static const OSG::BitVector HasRangeCutOnFieldMask =
        (TypeTraits<BitVector>::One << HasRangeCutOnFieldId);
    static const OSG::BitVector HasRangeCutOffFieldMask =
        (TypeTraits<BitVector>::One << HasRangeCutOffFieldId);
    static const OSG::BitVector HasRangeNearZoneFieldMask =
        (TypeTraits<BitVector>::One << HasRangeNearZoneFieldId);
    static const OSG::BitVector HasRangeFarZoneFieldMask =
        (TypeTraits<BitVector>::One << HasRangeFarZoneFieldId);
    static const OSG::BitVector HasCosSpotlightAngleFieldMask =
        (TypeTraits<BitVector>::One << HasCosSpotlightAngleFieldId);
    static const OSG::BitVector HasSpotlightAngleFieldMask =
        (TypeTraits<BitVector>::One << HasSpotlightAngleFieldId);
    static const OSG::BitVector HasSpotExponentFieldMask =
        (TypeTraits<BitVector>::One << HasSpotExponentFieldId);
    static const OSG::BitVector HasCinemaLightFieldMask =
        (TypeTraits<BitVector>::One << HasCinemaLightFieldId);
    static const OSG::BitVector PositionFieldMask =
        (TypeTraits<BitVector>::One << PositionFieldId);
    static const OSG::BitVector DirectionFieldMask =
        (TypeTraits<BitVector>::One << DirectionFieldId);
    static const OSG::BitVector ColorFieldMask =
        (TypeTraits<BitVector>::One << ColorFieldId);
    static const OSG::BitVector IntensityFieldMask =
        (TypeTraits<BitVector>::One << IntensityFieldId);
    static const OSG::BitVector AmbientIntensityFieldMask =
        (TypeTraits<BitVector>::One << AmbientIntensityFieldId);
    static const OSG::BitVector DiffuseIntensityFieldMask =
        (TypeTraits<BitVector>::One << DiffuseIntensityFieldId);
    static const OSG::BitVector SpecularIntensityFieldMask =
        (TypeTraits<BitVector>::One << SpecularIntensityFieldId);
    static const OSG::BitVector AttenuationFieldMask =
        (TypeTraits<BitVector>::One << AttenuationFieldId);
    static const OSG::BitVector SpotlightAngleFieldMask =
        (TypeTraits<BitVector>::One << SpotlightAngleFieldId);
    static const OSG::BitVector SpotExponentFieldMask =
        (TypeTraits<BitVector>::One << SpotExponentFieldId);
    static const OSG::BitVector InnerSuperEllipsesWidthFieldMask =
        (TypeTraits<BitVector>::One << InnerSuperEllipsesWidthFieldId);
    static const OSG::BitVector InnerSuperEllipsesHeightFieldMask =
        (TypeTraits<BitVector>::One << InnerSuperEllipsesHeightFieldId);
    static const OSG::BitVector OuterSuperEllipsesWidthFieldMask =
        (TypeTraits<BitVector>::One << OuterSuperEllipsesWidthFieldId);
    static const OSG::BitVector OuterSuperEllipsesHeightFieldMask =
        (TypeTraits<BitVector>::One << OuterSuperEllipsesHeightFieldId);
    static const OSG::BitVector SuperEllipsesRoundnessFieldMask =
        (TypeTraits<BitVector>::One << SuperEllipsesRoundnessFieldId);
    static const OSG::BitVector SuperEllipsesTwistFieldMask =
        (TypeTraits<BitVector>::One << SuperEllipsesTwistFieldId);
    static const OSG::BitVector RangeCutOnFieldMask =
        (TypeTraits<BitVector>::One << RangeCutOnFieldId);
    static const OSG::BitVector RangeCutOffFieldMask =
        (TypeTraits<BitVector>::One << RangeCutOffFieldId);
    static const OSG::BitVector RangeNearZoneFieldMask =
        (TypeTraits<BitVector>::One << RangeNearZoneFieldId);
    static const OSG::BitVector RangeFarZoneFieldMask =
        (TypeTraits<BitVector>::One << RangeFarZoneFieldId);
    static const OSG::BitVector TypeFieldMask =
        (TypeTraits<BitVector>::One << TypeFieldId);
    static const OSG::BitVector EnabledFieldMask =
        (TypeTraits<BitVector>::One << EnabledFieldId);
    static const OSG::BitVector BeaconFieldMask =
        (TypeTraits<BitVector>::One << BeaconFieldId);
    static const OSG::BitVector BeaconMatrixFieldMask =
        (TypeTraits<BitVector>::One << BeaconMatrixFieldId);
    static const OSG::BitVector EyeSpaceFieldMask =
        (TypeTraits<BitVector>::One << EyeSpaceFieldId);
    static const OSG::BitVector LastCamNearFieldMask =
        (TypeTraits<BitVector>::One << LastCamNearFieldId);
    static const OSG::BitVector LastCamFarFieldMask =
        (TypeTraits<BitVector>::One << LastCamFarFieldId);
    static const OSG::BitVector LastCamToWorldFieldMask =
        (TypeTraits<BitVector>::One << LastCamToWorldFieldId);
    static const OSG::BitVector LightBlockNameFieldMask =
        (TypeTraits<BitVector>::One << LightBlockNameFieldId);
    static const OSG::BitVector LightVariableNameFieldMask =
        (TypeTraits<BitVector>::One << LightVariableNameFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef SFBool            SFHasWorldToLightSpaceMatrixType;
    typedef SFBool            SFHasLightToWorldSpaceMatrixType;
    typedef SFBool            SFHasEyeToLightSpaceMatrixType;
    typedef SFBool            SFHasLightToEyeSpaceMatrixType;
    typedef SFBool            SFHasLightPerspectiveMatrixType;
    typedef SFBool            SFHasInvLightPerspectiveMatrixType;
    typedef SFBool            SFHasColorType;
    typedef SFBool            SFHasIntensityType;
    typedef SFBool            SFHasSeparateIntensitiesType;
    typedef SFBool            SFHasAttenuationType;
    typedef SFBool            SFAutoCalcRangesType;
    typedef SFBool            SFHasRangeCutOnType;
    typedef SFBool            SFHasRangeCutOffType;
    typedef SFBool            SFHasRangeNearZoneType;
    typedef SFBool            SFHasRangeFarZoneType;
    typedef SFBool            SFHasCosSpotlightAngleType;
    typedef SFBool            SFHasSpotlightAngleType;
    typedef SFBool            SFHasSpotExponentType;
    typedef SFBool            SFHasCinemaLightType;
    typedef MFPnt3f           MFPositionType;
    typedef MFVec3f           MFDirectionType;
    typedef MFColor3f         MFColorType;
    typedef MFReal32          MFIntensityType;
    typedef MFVec3f           MFAmbientIntensityType;
    typedef MFVec3f           MFDiffuseIntensityType;
    typedef MFVec3f           MFSpecularIntensityType;
    typedef MFVec3f           MFAttenuationType;
    typedef MFReal32          MFSpotlightAngleType;
    typedef MFReal32          MFSpotExponentType;
    typedef MFReal32          MFInnerSuperEllipsesWidthType;
    typedef MFReal32          MFInnerSuperEllipsesHeightType;
    typedef MFReal32          MFOuterSuperEllipsesWidthType;
    typedef MFReal32          MFOuterSuperEllipsesHeightType;
    typedef MFReal32          MFSuperEllipsesRoundnessType;
    typedef MFReal32          MFSuperEllipsesTwistType;
    typedef MFReal32          MFRangeCutOnType;
    typedef MFReal32          MFRangeCutOffType;
    typedef MFReal32          MFRangeNearZoneType;
    typedef MFReal32          MFRangeFarZoneType;
    typedef MFUInt8           MFTypeType;
    typedef MFBool            MFEnabledType;
    typedef MFWeakNodePtr     MFBeaconType;
    typedef MFMatrix          MFBeaconMatrixType;
    typedef SFBool            SFEyeSpaceType;
    typedef SFReal32          SFLastCamNearType;
    typedef SFReal32          SFLastCamFarType;
    typedef SFMatrix          SFLastCamToWorldType;
    typedef SFString          SFLightBlockNameType;
    typedef SFString          SFLightVariableNameType;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


                  SFBool              *editSFHasWorldToLightSpaceMatrix(void);
            const SFBool              *getSFHasWorldToLightSpaceMatrix (void) const;

                  SFBool              *editSFHasLightToWorldSpaceMatrix(void);
            const SFBool              *getSFHasLightToWorldSpaceMatrix (void) const;

                  SFBool              *editSFHasEyeToLightSpaceMatrix(void);
            const SFBool              *getSFHasEyeToLightSpaceMatrix (void) const;

                  SFBool              *editSFHasLightToEyeSpaceMatrix(void);
            const SFBool              *getSFHasLightToEyeSpaceMatrix (void) const;

                  SFBool              *editSFHasLightPerspectiveMatrix(void);
            const SFBool              *getSFHasLightPerspectiveMatrix (void) const;

                  SFBool              *editSFHasInvLightPerspectiveMatrix(void);
            const SFBool              *getSFHasInvLightPerspectiveMatrix (void) const;

                  SFBool              *editSFHasColor       (void);
            const SFBool              *getSFHasColor        (void) const;

                  SFBool              *editSFHasIntensity   (void);
            const SFBool              *getSFHasIntensity    (void) const;

                  SFBool              *editSFHasSeparateIntensities(void);
            const SFBool              *getSFHasSeparateIntensities (void) const;

                  SFBool              *editSFHasAttenuation (void);
            const SFBool              *getSFHasAttenuation  (void) const;

                  SFBool              *editSFAutoCalcRanges (void);
            const SFBool              *getSFAutoCalcRanges  (void) const;

                  SFBool              *editSFHasRangeCutOn  (void);
            const SFBool              *getSFHasRangeCutOn   (void) const;

                  SFBool              *editSFHasRangeCutOff (void);
            const SFBool              *getSFHasRangeCutOff  (void) const;

                  SFBool              *editSFHasRangeNearZone(void);
            const SFBool              *getSFHasRangeNearZone (void) const;

                  SFBool              *editSFHasRangeFarZone(void);
            const SFBool              *getSFHasRangeFarZone (void) const;

                  SFBool              *editSFHasCosSpotlightAngle(void);
            const SFBool              *getSFHasCosSpotlightAngle (void) const;

                  SFBool              *editSFHasSpotlightAngle(void);
            const SFBool              *getSFHasSpotlightAngle (void) const;

                  SFBool              *editSFHasSpotExponent(void);
            const SFBool              *getSFHasSpotExponent (void) const;

                  SFBool              *editSFHasCinemaLight (void);
            const SFBool              *getSFHasCinemaLight  (void) const;

                  SFBool              *editSFEyeSpace       (void);
            const SFBool              *getSFEyeSpace        (void) const;

                  SFString            *editSFLightBlockName (void);
            const SFString            *getSFLightBlockName  (void) const;

                  SFString            *editSFLightVariableName(void);
            const SFString            *getSFLightVariableName (void) const;


                  bool                &editHasWorldToLightSpaceMatrix(void);
                  bool                 getHasWorldToLightSpaceMatrix (void) const;

                  bool                &editHasLightToWorldSpaceMatrix(void);
                  bool                 getHasLightToWorldSpaceMatrix (void) const;

                  bool                &editHasEyeToLightSpaceMatrix(void);
                  bool                 getHasEyeToLightSpaceMatrix (void) const;

                  bool                &editHasLightToEyeSpaceMatrix(void);
                  bool                 getHasLightToEyeSpaceMatrix (void) const;

                  bool                &editHasLightPerspectiveMatrix(void);
                  bool                 getHasLightPerspectiveMatrix (void) const;

                  bool                &editHasInvLightPerspectiveMatrix(void);
                  bool                 getHasInvLightPerspectiveMatrix (void) const;

                  bool                &editHasColor       (void);
                  bool                 getHasColor        (void) const;

                  bool                &editHasIntensity   (void);
                  bool                 getHasIntensity    (void) const;

                  bool                &editHasSeparateIntensities(void);
                  bool                 getHasSeparateIntensities (void) const;

                  bool                &editHasAttenuation (void);
                  bool                 getHasAttenuation  (void) const;

                  bool                &editAutoCalcRanges (void);
                  bool                 getAutoCalcRanges  (void) const;

                  bool                &editHasRangeCutOn  (void);
                  bool                 getHasRangeCutOn   (void) const;

                  bool                &editHasRangeCutOff (void);
                  bool                 getHasRangeCutOff  (void) const;

                  bool                &editHasRangeNearZone(void);
                  bool                 getHasRangeNearZone (void) const;

                  bool                &editHasRangeFarZone(void);
                  bool                 getHasRangeFarZone (void) const;

                  bool                &editHasCosSpotlightAngle(void);
                  bool                 getHasCosSpotlightAngle (void) const;

                  bool                &editHasSpotlightAngle(void);
                  bool                 getHasSpotlightAngle (void) const;

                  bool                &editHasSpotExponent(void);
                  bool                 getHasSpotExponent (void) const;

                  bool                &editHasCinemaLight (void);
                  bool                 getHasCinemaLight  (void) const;

                  bool                &editEyeSpace       (void);
                  bool                 getEyeSpace        (void) const;

                  std::string         &editLightBlockName (void);
            const std::string         &getLightBlockName  (void) const;

                  std::string         &editLightVariableName(void);
            const std::string         &getLightVariableName (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setHasWorldToLightSpaceMatrix(const bool value);
            void setHasLightToWorldSpaceMatrix(const bool value);
            void setHasEyeToLightSpaceMatrix(const bool value);
            void setHasLightToEyeSpaceMatrix(const bool value);
            void setHasLightPerspectiveMatrix(const bool value);
            void setHasInvLightPerspectiveMatrix(const bool value);
            void setHasColor       (const bool value);
            void setHasIntensity   (const bool value);
            void setHasSeparateIntensities(const bool value);
            void setHasAttenuation (const bool value);
            void setAutoCalcRanges (const bool value);
            void setHasRangeCutOn  (const bool value);
            void setHasRangeCutOff (const bool value);
            void setHasRangeNearZone(const bool value);
            void setHasRangeFarZone(const bool value);
            void setHasCosSpotlightAngle(const bool value);
            void setHasSpotlightAngle(const bool value);
            void setHasSpotExponent(const bool value);
            void setHasCinemaLight (const bool value);
            void setEyeSpace       (const bool value);
            void setLightBlockName (const std::string &value);
            void setLightVariableName(const std::string &value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr Field Set                                 */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual SizeT  getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  MultiLightChunkTransitPtr  create          (void);
    static  MultiLightChunk           *createEmpty     (void);

    static  MultiLightChunkTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  MultiLightChunk            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  MultiLightChunkTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFBool            _sfHasWorldToLightSpaceMatrix;
    SFBool            _sfHasLightToWorldSpaceMatrix;
    SFBool            _sfHasEyeToLightSpaceMatrix;
    SFBool            _sfHasLightToEyeSpaceMatrix;
    SFBool            _sfHasLightPerspectiveMatrix;
    SFBool            _sfHasInvLightPerspectiveMatrix;
    SFBool            _sfHasColor;
    SFBool            _sfHasIntensity;
    SFBool            _sfHasSeparateIntensities;
    SFBool            _sfHasAttenuation;
    SFBool            _sfAutoCalcRanges;
    SFBool            _sfHasRangeCutOn;
    SFBool            _sfHasRangeCutOff;
    SFBool            _sfHasRangeNearZone;
    SFBool            _sfHasRangeFarZone;
    SFBool            _sfHasCosSpotlightAngle;
    SFBool            _sfHasSpotlightAngle;
    SFBool            _sfHasSpotExponent;
    SFBool            _sfHasCinemaLight;
    MFPnt3f           _mfPosition;
    MFVec3f           _mfDirection;
    MFColor3f         _mfColor;
    MFReal32          _mfIntensity;
    MFVec3f           _mfAmbientIntensity;
    MFVec3f           _mfDiffuseIntensity;
    MFVec3f           _mfSpecularIntensity;
    MFVec3f           _mfAttenuation;
    MFReal32          _mfSpotlightAngle;
    MFReal32          _mfSpotExponent;
    MFReal32          _mfInnerSuperEllipsesWidth;
    MFReal32          _mfInnerSuperEllipsesHeight;
    MFReal32          _mfOuterSuperEllipsesWidth;
    MFReal32          _mfOuterSuperEllipsesHeight;
    MFReal32          _mfSuperEllipsesRoundness;
    MFReal32          _mfSuperEllipsesTwist;
    MFReal32          _mfRangeCutOn;
    MFReal32          _mfRangeCutOff;
    MFReal32          _mfRangeNearZone;
    MFReal32          _mfRangeFarZone;
    MFUInt8           _mfType;
    MFBool            _mfEnabled;
    MFWeakNodePtr     _mfBeacon;
    MFMatrix          _mfBeaconMatrix;
    SFBool            _sfEyeSpace;
    SFReal32          _sfLastCamNear;
    SFReal32          _sfLastCamFar;
    SFMatrix          _sfLastCamToWorld;
    SFString          _sfLightBlockName;
    SFString          _sfLightVariableName;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    MultiLightChunkBase(void);
    MultiLightChunkBase(const MultiLightChunkBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~MultiLightChunkBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */

    void onCreate(const MultiLightChunk *source = NULL);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

     GetFieldHandlePtr  getHandleHasWorldToLightSpaceMatrix (void) const;
     EditFieldHandlePtr editHandleHasWorldToLightSpaceMatrix(void);
     GetFieldHandlePtr  getHandleHasLightToWorldSpaceMatrix (void) const;
     EditFieldHandlePtr editHandleHasLightToWorldSpaceMatrix(void);
     GetFieldHandlePtr  getHandleHasEyeToLightSpaceMatrix (void) const;
     EditFieldHandlePtr editHandleHasEyeToLightSpaceMatrix(void);
     GetFieldHandlePtr  getHandleHasLightToEyeSpaceMatrix (void) const;
     EditFieldHandlePtr editHandleHasLightToEyeSpaceMatrix(void);
     GetFieldHandlePtr  getHandleHasLightPerspectiveMatrix (void) const;
     EditFieldHandlePtr editHandleHasLightPerspectiveMatrix(void);
     GetFieldHandlePtr  getHandleHasInvLightPerspectiveMatrix (void) const;
     EditFieldHandlePtr editHandleHasInvLightPerspectiveMatrix(void);
     GetFieldHandlePtr  getHandleHasColor        (void) const;
     EditFieldHandlePtr editHandleHasColor       (void);
     GetFieldHandlePtr  getHandleHasIntensity    (void) const;
     EditFieldHandlePtr editHandleHasIntensity   (void);
     GetFieldHandlePtr  getHandleHasSeparateIntensities (void) const;
     EditFieldHandlePtr editHandleHasSeparateIntensities(void);
     GetFieldHandlePtr  getHandleHasAttenuation  (void) const;
     EditFieldHandlePtr editHandleHasAttenuation (void);
     GetFieldHandlePtr  getHandleAutoCalcRanges  (void) const;
     EditFieldHandlePtr editHandleAutoCalcRanges (void);
     GetFieldHandlePtr  getHandleHasRangeCutOn   (void) const;
     EditFieldHandlePtr editHandleHasRangeCutOn  (void);
     GetFieldHandlePtr  getHandleHasRangeCutOff  (void) const;
     EditFieldHandlePtr editHandleHasRangeCutOff (void);
     GetFieldHandlePtr  getHandleHasRangeNearZone (void) const;
     EditFieldHandlePtr editHandleHasRangeNearZone(void);
     GetFieldHandlePtr  getHandleHasRangeFarZone (void) const;
     EditFieldHandlePtr editHandleHasRangeFarZone(void);
     GetFieldHandlePtr  getHandleHasCosSpotlightAngle (void) const;
     EditFieldHandlePtr editHandleHasCosSpotlightAngle(void);
     GetFieldHandlePtr  getHandleHasSpotlightAngle (void) const;
     EditFieldHandlePtr editHandleHasSpotlightAngle(void);
     GetFieldHandlePtr  getHandleHasSpotExponent (void) const;
     EditFieldHandlePtr editHandleHasSpotExponent(void);
     GetFieldHandlePtr  getHandleHasCinemaLight  (void) const;
     EditFieldHandlePtr editHandleHasCinemaLight (void);
     GetFieldHandlePtr  getHandlePosition        (void) const;
     EditFieldHandlePtr editHandlePosition       (void);
     GetFieldHandlePtr  getHandleDirection       (void) const;
     EditFieldHandlePtr editHandleDirection      (void);
     GetFieldHandlePtr  getHandleColor           (void) const;
     EditFieldHandlePtr editHandleColor          (void);
     GetFieldHandlePtr  getHandleIntensity       (void) const;
     EditFieldHandlePtr editHandleIntensity      (void);
     GetFieldHandlePtr  getHandleAmbientIntensity (void) const;
     EditFieldHandlePtr editHandleAmbientIntensity(void);
     GetFieldHandlePtr  getHandleDiffuseIntensity (void) const;
     EditFieldHandlePtr editHandleDiffuseIntensity(void);
     GetFieldHandlePtr  getHandleSpecularIntensity (void) const;
     EditFieldHandlePtr editHandleSpecularIntensity(void);
     GetFieldHandlePtr  getHandleAttenuation     (void) const;
     EditFieldHandlePtr editHandleAttenuation    (void);
     GetFieldHandlePtr  getHandleSpotlightAngle  (void) const;
     EditFieldHandlePtr editHandleSpotlightAngle (void);
     GetFieldHandlePtr  getHandleSpotExponent    (void) const;
     EditFieldHandlePtr editHandleSpotExponent   (void);
     GetFieldHandlePtr  getHandleInnerSuperEllipsesWidth (void) const;
     EditFieldHandlePtr editHandleInnerSuperEllipsesWidth(void);
     GetFieldHandlePtr  getHandleInnerSuperEllipsesHeight (void) const;
     EditFieldHandlePtr editHandleInnerSuperEllipsesHeight(void);
     GetFieldHandlePtr  getHandleOuterSuperEllipsesWidth (void) const;
     EditFieldHandlePtr editHandleOuterSuperEllipsesWidth(void);
     GetFieldHandlePtr  getHandleOuterSuperEllipsesHeight (void) const;
     EditFieldHandlePtr editHandleOuterSuperEllipsesHeight(void);
     GetFieldHandlePtr  getHandleSuperEllipsesRoundness (void) const;
     EditFieldHandlePtr editHandleSuperEllipsesRoundness(void);
     GetFieldHandlePtr  getHandleSuperEllipsesTwist (void) const;
     EditFieldHandlePtr editHandleSuperEllipsesTwist(void);
     GetFieldHandlePtr  getHandleRangeCutOn      (void) const;
     EditFieldHandlePtr editHandleRangeCutOn     (void);
     GetFieldHandlePtr  getHandleRangeCutOff     (void) const;
     EditFieldHandlePtr editHandleRangeCutOff    (void);
     GetFieldHandlePtr  getHandleRangeNearZone   (void) const;
     EditFieldHandlePtr editHandleRangeNearZone  (void);
     GetFieldHandlePtr  getHandleRangeFarZone    (void) const;
     EditFieldHandlePtr editHandleRangeFarZone   (void);
     GetFieldHandlePtr  getHandleType            (void) const;
     EditFieldHandlePtr editHandleType           (void);
     GetFieldHandlePtr  getHandleEnabled         (void) const;
     EditFieldHandlePtr editHandleEnabled        (void);
     GetFieldHandlePtr  getHandleBeacon          (void) const;
     EditFieldHandlePtr editHandleBeacon         (void);
     GetFieldHandlePtr  getHandleBeaconMatrix    (void) const;
     EditFieldHandlePtr editHandleBeaconMatrix   (void);
     GetFieldHandlePtr  getHandleEyeSpace        (void) const;
     EditFieldHandlePtr editHandleEyeSpace       (void);
     GetFieldHandlePtr  getHandleLastCamNear     (void) const;
     EditFieldHandlePtr editHandleLastCamNear    (void);
     GetFieldHandlePtr  getHandleLastCamFar      (void) const;
     EditFieldHandlePtr editHandleLastCamFar     (void);
     GetFieldHandlePtr  getHandleLastCamToWorld  (void) const;
     EditFieldHandlePtr editHandleLastCamToWorld (void);
     GetFieldHandlePtr  getHandleLightBlockName  (void) const;
     EditFieldHandlePtr editHandleLightBlockName (void);
     GetFieldHandlePtr  getHandleLightVariableName (void) const;
     EditFieldHandlePtr editHandleLightVariableName(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


                  MFPnt3f             *editMFPosition       (void);
            const MFPnt3f             *getMFPosition        (void) const;

                  MFVec3f             *editMFDirection      (void);
            const MFVec3f             *getMFDirection       (void) const;

                  MFColor3f           *editMFColor          (void);
            const MFColor3f           *getMFColor           (void) const;

                  MFReal32            *editMFIntensity      (void);
            const MFReal32            *getMFIntensity       (void) const;

                  MFVec3f             *editMFAmbientIntensity(void);
            const MFVec3f             *getMFAmbientIntensity (void) const;

                  MFVec3f             *editMFDiffuseIntensity(void);
            const MFVec3f             *getMFDiffuseIntensity (void) const;

                  MFVec3f             *editMFSpecularIntensity(void);
            const MFVec3f             *getMFSpecularIntensity (void) const;

                  MFVec3f             *editMFAttenuation    (void);
            const MFVec3f             *getMFAttenuation     (void) const;

                  MFReal32            *editMFSpotlightAngle (void);
            const MFReal32            *getMFSpotlightAngle  (void) const;

                  MFReal32            *editMFSpotExponent   (void);
            const MFReal32            *getMFSpotExponent    (void) const;

                  MFReal32            *editMFInnerSuperEllipsesWidth(void);
            const MFReal32            *getMFInnerSuperEllipsesWidth (void) const;

                  MFReal32            *editMFInnerSuperEllipsesHeight(void);
            const MFReal32            *getMFInnerSuperEllipsesHeight (void) const;

                  MFReal32            *editMFOuterSuperEllipsesWidth(void);
            const MFReal32            *getMFOuterSuperEllipsesWidth (void) const;

                  MFReal32            *editMFOuterSuperEllipsesHeight(void);
            const MFReal32            *getMFOuterSuperEllipsesHeight (void) const;

                  MFReal32            *editMFSuperEllipsesRoundness(void);
            const MFReal32            *getMFSuperEllipsesRoundness (void) const;

                  MFReal32            *editMFSuperEllipsesTwist(void);
            const MFReal32            *getMFSuperEllipsesTwist (void) const;

                  MFReal32            *editMFRangeCutOn     (void);
            const MFReal32            *getMFRangeCutOn      (void) const;

                  MFReal32            *editMFRangeCutOff    (void);
            const MFReal32            *getMFRangeCutOff     (void) const;

                  MFReal32            *editMFRangeNearZone  (void);
            const MFReal32            *getMFRangeNearZone   (void) const;

                  MFReal32            *editMFRangeFarZone   (void);
            const MFReal32            *getMFRangeFarZone    (void) const;

                  MFUInt8             *editMFType           (void);
            const MFUInt8             *getMFType            (void) const;

                  MFBool              *editMFEnabled        (void);
            const MFBool              *getMFEnabled         (void) const;
            const MFWeakNodePtr       *getMFBeacon          (void) const;
                  MFWeakNodePtr       *editMFBeacon         (void);

                  MFMatrix            *editMFBeaconMatrix   (void);
            const MFMatrix            *getMFBeaconMatrix    (void) const;

                  SFReal32            *editSFLastCamNear    (void);
            const SFReal32            *getSFLastCamNear     (void) const;

                  SFReal32            *editSFLastCamFar     (void);
            const SFReal32            *getSFLastCamFar      (void) const;

                  SFMatrix            *editSFLastCamToWorld (void);
            const SFMatrix            *getSFLastCamToWorld  (void) const;


                  MFPnt3f            ::reference editPosition       (const UInt32 index);
            const Pnt3f               &getPosition        (const UInt32 index) const;

                  MFVec3f            ::reference editDirection      (const UInt32 index);
            const Vec3f               &getDirection       (const UInt32 index) const;

                  MFColor3f          ::reference editColor          (const UInt32 index);
            const Color3f             &getColor           (const UInt32 index) const;

                  MFReal32           ::reference editIntensity      (const UInt32 index);
                  Real32               getIntensity       (const UInt32 index) const;

                  MFVec3f            ::reference editAmbientIntensity(const UInt32 index);
            const Vec3f               &getAmbientIntensity (const UInt32 index) const;

                  MFVec3f            ::reference editDiffuseIntensity(const UInt32 index);
            const Vec3f               &getDiffuseIntensity (const UInt32 index) const;

                  MFVec3f            ::reference editSpecularIntensity(const UInt32 index);
            const Vec3f               &getSpecularIntensity (const UInt32 index) const;

                  MFVec3f            ::reference editAttenuation    (const UInt32 index);
            const Vec3f               &getAttenuation     (const UInt32 index) const;

                  MFReal32           ::reference editSpotlightAngle (const UInt32 index);
                  Real32               getSpotlightAngle  (const UInt32 index) const;

                  MFReal32           ::reference editSpotExponent   (const UInt32 index);
                  Real32               getSpotExponent    (const UInt32 index) const;

                  MFReal32           ::reference editInnerSuperEllipsesWidth(const UInt32 index);
                  Real32               getInnerSuperEllipsesWidth (const UInt32 index) const;

                  MFReal32           ::reference editInnerSuperEllipsesHeight(const UInt32 index);
                  Real32               getInnerSuperEllipsesHeight (const UInt32 index) const;

                  MFReal32           ::reference editOuterSuperEllipsesWidth(const UInt32 index);
                  Real32               getOuterSuperEllipsesWidth (const UInt32 index) const;

                  MFReal32           ::reference editOuterSuperEllipsesHeight(const UInt32 index);
                  Real32               getOuterSuperEllipsesHeight (const UInt32 index) const;

                  MFReal32           ::reference editSuperEllipsesRoundness(const UInt32 index);
                  Real32               getSuperEllipsesRoundness (const UInt32 index) const;

                  MFReal32           ::reference editSuperEllipsesTwist(const UInt32 index);
                  Real32               getSuperEllipsesTwist (const UInt32 index) const;

                  MFReal32           ::reference editRangeCutOn     (const UInt32 index);
                  Real32               getRangeCutOn      (const UInt32 index) const;

                  MFReal32           ::reference editRangeCutOff    (const UInt32 index);
                  Real32               getRangeCutOff     (const UInt32 index) const;

                  MFReal32           ::reference editRangeNearZone  (const UInt32 index);
                  Real32               getRangeNearZone   (const UInt32 index) const;

                  MFReal32           ::reference editRangeFarZone   (const UInt32 index);
                  Real32               getRangeFarZone    (const UInt32 index) const;

                  MFUInt8            ::reference editType           (const UInt32 index);
                  UInt8                getType            (const UInt32 index) const;

                  MFBool             ::reference editEnabled        (const UInt32 index);
                  bool                 getEnabled         (const UInt32 index) const;

                  Node * getBeacon         (const UInt32 index) const;

                  MFMatrix           ::reference editBeaconMatrix   (const UInt32 index);
            const Matrix              &getBeaconMatrix    (const UInt32 index) const;

                  Real32              &editLastCamNear    (void);
                  Real32               getLastCamNear     (void) const;

                  Real32              &editLastCamFar     (void);
                  Real32               getLastCamFar      (void) const;

                  Matrix              &editLastCamToWorld (void);
            const Matrix              &getLastCamToWorld  (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setLastCamNear    (const Real32 value);
            void setLastCamFar     (const Real32 value);
            void setLastCamToWorld (const Matrix &value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    void pushToBeacon              (Node * const value   );
    void assignBeacon              (const MFWeakNodePtr     &value);
    void removeFromBeacon (UInt32                uiIndex );
    void removeObjFromBeacon(Node * const value   );
    void clearBeacon                (void                          );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      MultiLightChunkBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const MultiLightChunkBase &source);
};

typedef MultiLightChunkBase *MultiLightChunkBaseP;

OSG_END_NAMESPACE

#endif /* _OSGMULTILIGHTCHUNKBASE_H_ */
