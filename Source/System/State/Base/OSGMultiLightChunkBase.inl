/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class MultiLightChunk!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

OSG_BEGIN_NAMESPACE



//! access the type of the class
inline
OSG::FieldContainerType &MultiLightChunkBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 MultiLightChunkBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 MultiLightChunkBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/

//! Get the value of the MultiLightChunk::_sfHasWorldToLightSpaceMatrix field.

inline
bool &MultiLightChunkBase::editHasWorldToLightSpaceMatrix(void)
{
    editSField(HasWorldToLightSpaceMatrixFieldMask);

    return _sfHasWorldToLightSpaceMatrix.getValue();
}

//! Get the value of the MultiLightChunk::_sfHasWorldToLightSpaceMatrix field.
inline
      bool  MultiLightChunkBase::getHasWorldToLightSpaceMatrix(void) const
{
    return _sfHasWorldToLightSpaceMatrix.getValue();
}

//! Set the value of the MultiLightChunk::_sfHasWorldToLightSpaceMatrix field.
inline
void MultiLightChunkBase::setHasWorldToLightSpaceMatrix(const bool value)
{
    editSField(HasWorldToLightSpaceMatrixFieldMask);

    _sfHasWorldToLightSpaceMatrix.setValue(value);
}
//! Get the value of the MultiLightChunk::_sfHasLightToWorldSpaceMatrix field.

inline
bool &MultiLightChunkBase::editHasLightToWorldSpaceMatrix(void)
{
    editSField(HasLightToWorldSpaceMatrixFieldMask);

    return _sfHasLightToWorldSpaceMatrix.getValue();
}

//! Get the value of the MultiLightChunk::_sfHasLightToWorldSpaceMatrix field.
inline
      bool  MultiLightChunkBase::getHasLightToWorldSpaceMatrix(void) const
{
    return _sfHasLightToWorldSpaceMatrix.getValue();
}

//! Set the value of the MultiLightChunk::_sfHasLightToWorldSpaceMatrix field.
inline
void MultiLightChunkBase::setHasLightToWorldSpaceMatrix(const bool value)
{
    editSField(HasLightToWorldSpaceMatrixFieldMask);

    _sfHasLightToWorldSpaceMatrix.setValue(value);
}
//! Get the value of the MultiLightChunk::_sfHasEyeToLightSpaceMatrix field.

inline
bool &MultiLightChunkBase::editHasEyeToLightSpaceMatrix(void)
{
    editSField(HasEyeToLightSpaceMatrixFieldMask);

    return _sfHasEyeToLightSpaceMatrix.getValue();
}

//! Get the value of the MultiLightChunk::_sfHasEyeToLightSpaceMatrix field.
inline
      bool  MultiLightChunkBase::getHasEyeToLightSpaceMatrix(void) const
{
    return _sfHasEyeToLightSpaceMatrix.getValue();
}

//! Set the value of the MultiLightChunk::_sfHasEyeToLightSpaceMatrix field.
inline
void MultiLightChunkBase::setHasEyeToLightSpaceMatrix(const bool value)
{
    editSField(HasEyeToLightSpaceMatrixFieldMask);

    _sfHasEyeToLightSpaceMatrix.setValue(value);
}
//! Get the value of the MultiLightChunk::_sfHasLightToEyeSpaceMatrix field.

inline
bool &MultiLightChunkBase::editHasLightToEyeSpaceMatrix(void)
{
    editSField(HasLightToEyeSpaceMatrixFieldMask);

    return _sfHasLightToEyeSpaceMatrix.getValue();
}

//! Get the value of the MultiLightChunk::_sfHasLightToEyeSpaceMatrix field.
inline
      bool  MultiLightChunkBase::getHasLightToEyeSpaceMatrix(void) const
{
    return _sfHasLightToEyeSpaceMatrix.getValue();
}

//! Set the value of the MultiLightChunk::_sfHasLightToEyeSpaceMatrix field.
inline
void MultiLightChunkBase::setHasLightToEyeSpaceMatrix(const bool value)
{
    editSField(HasLightToEyeSpaceMatrixFieldMask);

    _sfHasLightToEyeSpaceMatrix.setValue(value);
}
//! Get the value of the MultiLightChunk::_sfHasLightPerspectiveMatrix field.

inline
bool &MultiLightChunkBase::editHasLightPerspectiveMatrix(void)
{
    editSField(HasLightPerspectiveMatrixFieldMask);

    return _sfHasLightPerspectiveMatrix.getValue();
}

//! Get the value of the MultiLightChunk::_sfHasLightPerspectiveMatrix field.
inline
      bool  MultiLightChunkBase::getHasLightPerspectiveMatrix(void) const
{
    return _sfHasLightPerspectiveMatrix.getValue();
}

//! Set the value of the MultiLightChunk::_sfHasLightPerspectiveMatrix field.
inline
void MultiLightChunkBase::setHasLightPerspectiveMatrix(const bool value)
{
    editSField(HasLightPerspectiveMatrixFieldMask);

    _sfHasLightPerspectiveMatrix.setValue(value);
}
//! Get the value of the MultiLightChunk::_sfHasInvLightPerspectiveMatrix field.

inline
bool &MultiLightChunkBase::editHasInvLightPerspectiveMatrix(void)
{
    editSField(HasInvLightPerspectiveMatrixFieldMask);

    return _sfHasInvLightPerspectiveMatrix.getValue();
}

//! Get the value of the MultiLightChunk::_sfHasInvLightPerspectiveMatrix field.
inline
      bool  MultiLightChunkBase::getHasInvLightPerspectiveMatrix(void) const
{
    return _sfHasInvLightPerspectiveMatrix.getValue();
}

//! Set the value of the MultiLightChunk::_sfHasInvLightPerspectiveMatrix field.
inline
void MultiLightChunkBase::setHasInvLightPerspectiveMatrix(const bool value)
{
    editSField(HasInvLightPerspectiveMatrixFieldMask);

    _sfHasInvLightPerspectiveMatrix.setValue(value);
}
//! Get the value of the MultiLightChunk::_sfHasColor field.

inline
bool &MultiLightChunkBase::editHasColor(void)
{
    editSField(HasColorFieldMask);

    return _sfHasColor.getValue();
}

//! Get the value of the MultiLightChunk::_sfHasColor field.
inline
      bool  MultiLightChunkBase::getHasColor(void) const
{
    return _sfHasColor.getValue();
}

//! Set the value of the MultiLightChunk::_sfHasColor field.
inline
void MultiLightChunkBase::setHasColor(const bool value)
{
    editSField(HasColorFieldMask);

    _sfHasColor.setValue(value);
}
//! Get the value of the MultiLightChunk::_sfHasIntensity field.

inline
bool &MultiLightChunkBase::editHasIntensity(void)
{
    editSField(HasIntensityFieldMask);

    return _sfHasIntensity.getValue();
}

//! Get the value of the MultiLightChunk::_sfHasIntensity field.
inline
      bool  MultiLightChunkBase::getHasIntensity(void) const
{
    return _sfHasIntensity.getValue();
}

//! Set the value of the MultiLightChunk::_sfHasIntensity field.
inline
void MultiLightChunkBase::setHasIntensity(const bool value)
{
    editSField(HasIntensityFieldMask);

    _sfHasIntensity.setValue(value);
}
//! Get the value of the MultiLightChunk::_sfHasSeparateIntensities field.

inline
bool &MultiLightChunkBase::editHasSeparateIntensities(void)
{
    editSField(HasSeparateIntensitiesFieldMask);

    return _sfHasSeparateIntensities.getValue();
}

//! Get the value of the MultiLightChunk::_sfHasSeparateIntensities field.
inline
      bool  MultiLightChunkBase::getHasSeparateIntensities(void) const
{
    return _sfHasSeparateIntensities.getValue();
}

//! Set the value of the MultiLightChunk::_sfHasSeparateIntensities field.
inline
void MultiLightChunkBase::setHasSeparateIntensities(const bool value)
{
    editSField(HasSeparateIntensitiesFieldMask);

    _sfHasSeparateIntensities.setValue(value);
}
//! Get the value of the MultiLightChunk::_sfHasAttenuation field.

inline
bool &MultiLightChunkBase::editHasAttenuation(void)
{
    editSField(HasAttenuationFieldMask);

    return _sfHasAttenuation.getValue();
}

//! Get the value of the MultiLightChunk::_sfHasAttenuation field.
inline
      bool  MultiLightChunkBase::getHasAttenuation(void) const
{
    return _sfHasAttenuation.getValue();
}

//! Set the value of the MultiLightChunk::_sfHasAttenuation field.
inline
void MultiLightChunkBase::setHasAttenuation(const bool value)
{
    editSField(HasAttenuationFieldMask);

    _sfHasAttenuation.setValue(value);
}
//! Get the value of the MultiLightChunk::_sfAutoCalcRanges field.

inline
bool &MultiLightChunkBase::editAutoCalcRanges(void)
{
    editSField(AutoCalcRangesFieldMask);

    return _sfAutoCalcRanges.getValue();
}

//! Get the value of the MultiLightChunk::_sfAutoCalcRanges field.
inline
      bool  MultiLightChunkBase::getAutoCalcRanges(void) const
{
    return _sfAutoCalcRanges.getValue();
}

//! Set the value of the MultiLightChunk::_sfAutoCalcRanges field.
inline
void MultiLightChunkBase::setAutoCalcRanges(const bool value)
{
    editSField(AutoCalcRangesFieldMask);

    _sfAutoCalcRanges.setValue(value);
}
//! Get the value of the MultiLightChunk::_sfHasRangeCutOn field.

inline
bool &MultiLightChunkBase::editHasRangeCutOn(void)
{
    editSField(HasRangeCutOnFieldMask);

    return _sfHasRangeCutOn.getValue();
}

//! Get the value of the MultiLightChunk::_sfHasRangeCutOn field.
inline
      bool  MultiLightChunkBase::getHasRangeCutOn(void) const
{
    return _sfHasRangeCutOn.getValue();
}

//! Set the value of the MultiLightChunk::_sfHasRangeCutOn field.
inline
void MultiLightChunkBase::setHasRangeCutOn(const bool value)
{
    editSField(HasRangeCutOnFieldMask);

    _sfHasRangeCutOn.setValue(value);
}
//! Get the value of the MultiLightChunk::_sfHasRangeCutOff field.

inline
bool &MultiLightChunkBase::editHasRangeCutOff(void)
{
    editSField(HasRangeCutOffFieldMask);

    return _sfHasRangeCutOff.getValue();
}

//! Get the value of the MultiLightChunk::_sfHasRangeCutOff field.
inline
      bool  MultiLightChunkBase::getHasRangeCutOff(void) const
{
    return _sfHasRangeCutOff.getValue();
}

//! Set the value of the MultiLightChunk::_sfHasRangeCutOff field.
inline
void MultiLightChunkBase::setHasRangeCutOff(const bool value)
{
    editSField(HasRangeCutOffFieldMask);

    _sfHasRangeCutOff.setValue(value);
}
//! Get the value of the MultiLightChunk::_sfHasRangeNearZone field.

inline
bool &MultiLightChunkBase::editHasRangeNearZone(void)
{
    editSField(HasRangeNearZoneFieldMask);

    return _sfHasRangeNearZone.getValue();
}

//! Get the value of the MultiLightChunk::_sfHasRangeNearZone field.
inline
      bool  MultiLightChunkBase::getHasRangeNearZone(void) const
{
    return _sfHasRangeNearZone.getValue();
}

//! Set the value of the MultiLightChunk::_sfHasRangeNearZone field.
inline
void MultiLightChunkBase::setHasRangeNearZone(const bool value)
{
    editSField(HasRangeNearZoneFieldMask);

    _sfHasRangeNearZone.setValue(value);
}
//! Get the value of the MultiLightChunk::_sfHasRangeFarZone field.

inline
bool &MultiLightChunkBase::editHasRangeFarZone(void)
{
    editSField(HasRangeFarZoneFieldMask);

    return _sfHasRangeFarZone.getValue();
}

//! Get the value of the MultiLightChunk::_sfHasRangeFarZone field.
inline
      bool  MultiLightChunkBase::getHasRangeFarZone(void) const
{
    return _sfHasRangeFarZone.getValue();
}

//! Set the value of the MultiLightChunk::_sfHasRangeFarZone field.
inline
void MultiLightChunkBase::setHasRangeFarZone(const bool value)
{
    editSField(HasRangeFarZoneFieldMask);

    _sfHasRangeFarZone.setValue(value);
}
//! Get the value of the MultiLightChunk::_sfHasCosSpotlightAngle field.

inline
bool &MultiLightChunkBase::editHasCosSpotlightAngle(void)
{
    editSField(HasCosSpotlightAngleFieldMask);

    return _sfHasCosSpotlightAngle.getValue();
}

//! Get the value of the MultiLightChunk::_sfHasCosSpotlightAngle field.
inline
      bool  MultiLightChunkBase::getHasCosSpotlightAngle(void) const
{
    return _sfHasCosSpotlightAngle.getValue();
}

//! Set the value of the MultiLightChunk::_sfHasCosSpotlightAngle field.
inline
void MultiLightChunkBase::setHasCosSpotlightAngle(const bool value)
{
    editSField(HasCosSpotlightAngleFieldMask);

    _sfHasCosSpotlightAngle.setValue(value);
}
//! Get the value of the MultiLightChunk::_sfHasSpotlightAngle field.

inline
bool &MultiLightChunkBase::editHasSpotlightAngle(void)
{
    editSField(HasSpotlightAngleFieldMask);

    return _sfHasSpotlightAngle.getValue();
}

//! Get the value of the MultiLightChunk::_sfHasSpotlightAngle field.
inline
      bool  MultiLightChunkBase::getHasSpotlightAngle(void) const
{
    return _sfHasSpotlightAngle.getValue();
}

//! Set the value of the MultiLightChunk::_sfHasSpotlightAngle field.
inline
void MultiLightChunkBase::setHasSpotlightAngle(const bool value)
{
    editSField(HasSpotlightAngleFieldMask);

    _sfHasSpotlightAngle.setValue(value);
}
//! Get the value of the MultiLightChunk::_sfHasSpotExponent field.

inline
bool &MultiLightChunkBase::editHasSpotExponent(void)
{
    editSField(HasSpotExponentFieldMask);

    return _sfHasSpotExponent.getValue();
}

//! Get the value of the MultiLightChunk::_sfHasSpotExponent field.
inline
      bool  MultiLightChunkBase::getHasSpotExponent(void) const
{
    return _sfHasSpotExponent.getValue();
}

//! Set the value of the MultiLightChunk::_sfHasSpotExponent field.
inline
void MultiLightChunkBase::setHasSpotExponent(const bool value)
{
    editSField(HasSpotExponentFieldMask);

    _sfHasSpotExponent.setValue(value);
}
//! Get the value of the MultiLightChunk::_sfHasCinemaLight field.

inline
bool &MultiLightChunkBase::editHasCinemaLight(void)
{
    editSField(HasCinemaLightFieldMask);

    return _sfHasCinemaLight.getValue();
}

//! Get the value of the MultiLightChunk::_sfHasCinemaLight field.
inline
      bool  MultiLightChunkBase::getHasCinemaLight(void) const
{
    return _sfHasCinemaLight.getValue();
}

//! Set the value of the MultiLightChunk::_sfHasCinemaLight field.
inline
void MultiLightChunkBase::setHasCinemaLight(const bool value)
{
    editSField(HasCinemaLightFieldMask);

    _sfHasCinemaLight.setValue(value);
}
//! Get the value of the MultiLightChunk::_sfEyeSpace field.

inline
bool &MultiLightChunkBase::editEyeSpace(void)
{
    editSField(EyeSpaceFieldMask);

    return _sfEyeSpace.getValue();
}

//! Get the value of the MultiLightChunk::_sfEyeSpace field.
inline
      bool  MultiLightChunkBase::getEyeSpace(void) const
{
    return _sfEyeSpace.getValue();
}

//! Set the value of the MultiLightChunk::_sfEyeSpace field.
inline
void MultiLightChunkBase::setEyeSpace(const bool value)
{
    editSField(EyeSpaceFieldMask);

    _sfEyeSpace.setValue(value);
}
//! Get the value of the MultiLightChunk::_sfLastCamNear field.

inline
Real32 &MultiLightChunkBase::editLastCamNear(void)
{
    editSField(LastCamNearFieldMask);

    return _sfLastCamNear.getValue();
}

//! Get the value of the MultiLightChunk::_sfLastCamNear field.
inline
      Real32  MultiLightChunkBase::getLastCamNear(void) const
{
    return _sfLastCamNear.getValue();
}

//! Set the value of the MultiLightChunk::_sfLastCamNear field.
inline
void MultiLightChunkBase::setLastCamNear(const Real32 value)
{
    editSField(LastCamNearFieldMask);

    _sfLastCamNear.setValue(value);
}
//! Get the value of the MultiLightChunk::_sfLastCamFar field.

inline
Real32 &MultiLightChunkBase::editLastCamFar(void)
{
    editSField(LastCamFarFieldMask);

    return _sfLastCamFar.getValue();
}

//! Get the value of the MultiLightChunk::_sfLastCamFar field.
inline
      Real32  MultiLightChunkBase::getLastCamFar(void) const
{
    return _sfLastCamFar.getValue();
}

//! Set the value of the MultiLightChunk::_sfLastCamFar field.
inline
void MultiLightChunkBase::setLastCamFar(const Real32 value)
{
    editSField(LastCamFarFieldMask);

    _sfLastCamFar.setValue(value);
}
//! Get the value of the MultiLightChunk::_sfLastCamToWorld field.

inline
Matrix &MultiLightChunkBase::editLastCamToWorld(void)
{
    editSField(LastCamToWorldFieldMask);

    return _sfLastCamToWorld.getValue();
}

//! Get the value of the MultiLightChunk::_sfLastCamToWorld field.
inline
const Matrix &MultiLightChunkBase::getLastCamToWorld(void) const
{
    return _sfLastCamToWorld.getValue();
}

//! Set the value of the MultiLightChunk::_sfLastCamToWorld field.
inline
void MultiLightChunkBase::setLastCamToWorld(const Matrix &value)
{
    editSField(LastCamToWorldFieldMask);

    _sfLastCamToWorld.setValue(value);
}
//! Get the value of the MultiLightChunk::_sfLightBlockName field.

inline
std::string &MultiLightChunkBase::editLightBlockName(void)
{
    editSField(LightBlockNameFieldMask);

    return _sfLightBlockName.getValue();
}

//! Get the value of the MultiLightChunk::_sfLightBlockName field.
inline
const std::string &MultiLightChunkBase::getLightBlockName(void) const
{
    return _sfLightBlockName.getValue();
}

//! Set the value of the MultiLightChunk::_sfLightBlockName field.
inline
void MultiLightChunkBase::setLightBlockName(const std::string &value)
{
    editSField(LightBlockNameFieldMask);

    _sfLightBlockName.setValue(value);
}
//! Get the value of the MultiLightChunk::_sfLightVariableName field.

inline
std::string &MultiLightChunkBase::editLightVariableName(void)
{
    editSField(LightVariableNameFieldMask);

    return _sfLightVariableName.getValue();
}

//! Get the value of the MultiLightChunk::_sfLightVariableName field.
inline
const std::string &MultiLightChunkBase::getLightVariableName(void) const
{
    return _sfLightVariableName.getValue();
}

//! Set the value of the MultiLightChunk::_sfLightVariableName field.
inline
void MultiLightChunkBase::setLightVariableName(const std::string &value)
{
    editSField(LightVariableNameFieldMask);

    _sfLightVariableName.setValue(value);
}

//! Get the value of the \a index element the MultiLightChunk::_mfPosition field.
inline
const Pnt3f &MultiLightChunkBase::getPosition(const UInt32 index) const
{
    return _mfPosition[index];
}

inline
MFPnt3f            ::reference MultiLightChunkBase::editPosition(const UInt32 index)
{
    editMField(PositionFieldMask, _mfPosition);

    return _mfPosition[index];
}

//! Get the value of the \a index element the MultiLightChunk::_mfDirection field.
inline
const Vec3f &MultiLightChunkBase::getDirection(const UInt32 index) const
{
    return _mfDirection[index];
}

inline
MFVec3f            ::reference MultiLightChunkBase::editDirection(const UInt32 index)
{
    editMField(DirectionFieldMask, _mfDirection);

    return _mfDirection[index];
}

//! Get the value of the \a index element the MultiLightChunk::_mfColor field.
inline
const Color3f &MultiLightChunkBase::getColor(const UInt32 index) const
{
    return _mfColor[index];
}

inline
MFColor3f          ::reference MultiLightChunkBase::editColor(const UInt32 index)
{
    editMField(ColorFieldMask, _mfColor);

    return _mfColor[index];
}

//! Get the value of the \a index element the MultiLightChunk::_mfIntensity field.
inline
      Real32  MultiLightChunkBase::getIntensity(const UInt32 index) const
{
    return _mfIntensity[index];
}

inline
MFReal32           ::reference MultiLightChunkBase::editIntensity(const UInt32 index)
{
    editMField(IntensityFieldMask, _mfIntensity);

    return _mfIntensity[index];
}

//! Get the value of the \a index element the MultiLightChunk::_mfAmbientIntensity field.
inline
const Vec3f &MultiLightChunkBase::getAmbientIntensity(const UInt32 index) const
{
    return _mfAmbientIntensity[index];
}

inline
MFVec3f            ::reference MultiLightChunkBase::editAmbientIntensity(const UInt32 index)
{
    editMField(AmbientIntensityFieldMask, _mfAmbientIntensity);

    return _mfAmbientIntensity[index];
}

//! Get the value of the \a index element the MultiLightChunk::_mfDiffuseIntensity field.
inline
const Vec3f &MultiLightChunkBase::getDiffuseIntensity(const UInt32 index) const
{
    return _mfDiffuseIntensity[index];
}

inline
MFVec3f            ::reference MultiLightChunkBase::editDiffuseIntensity(const UInt32 index)
{
    editMField(DiffuseIntensityFieldMask, _mfDiffuseIntensity);

    return _mfDiffuseIntensity[index];
}

//! Get the value of the \a index element the MultiLightChunk::_mfSpecularIntensity field.
inline
const Vec3f &MultiLightChunkBase::getSpecularIntensity(const UInt32 index) const
{
    return _mfSpecularIntensity[index];
}

inline
MFVec3f            ::reference MultiLightChunkBase::editSpecularIntensity(const UInt32 index)
{
    editMField(SpecularIntensityFieldMask, _mfSpecularIntensity);

    return _mfSpecularIntensity[index];
}

//! Get the value of the \a index element the MultiLightChunk::_mfAttenuation field.
inline
const Vec3f &MultiLightChunkBase::getAttenuation(const UInt32 index) const
{
    return _mfAttenuation[index];
}

inline
MFVec3f            ::reference MultiLightChunkBase::editAttenuation(const UInt32 index)
{
    editMField(AttenuationFieldMask, _mfAttenuation);

    return _mfAttenuation[index];
}

//! Get the value of the \a index element the MultiLightChunk::_mfSpotlightAngle field.
inline
      Real32  MultiLightChunkBase::getSpotlightAngle(const UInt32 index) const
{
    return _mfSpotlightAngle[index];
}

inline
MFReal32           ::reference MultiLightChunkBase::editSpotlightAngle(const UInt32 index)
{
    editMField(SpotlightAngleFieldMask, _mfSpotlightAngle);

    return _mfSpotlightAngle[index];
}

//! Get the value of the \a index element the MultiLightChunk::_mfSpotExponent field.
inline
      Real32  MultiLightChunkBase::getSpotExponent(const UInt32 index) const
{
    return _mfSpotExponent[index];
}

inline
MFReal32           ::reference MultiLightChunkBase::editSpotExponent(const UInt32 index)
{
    editMField(SpotExponentFieldMask, _mfSpotExponent);

    return _mfSpotExponent[index];
}

//! Get the value of the \a index element the MultiLightChunk::_mfInnerSuperEllipsesWidth field.
inline
      Real32  MultiLightChunkBase::getInnerSuperEllipsesWidth(const UInt32 index) const
{
    return _mfInnerSuperEllipsesWidth[index];
}

inline
MFReal32           ::reference MultiLightChunkBase::editInnerSuperEllipsesWidth(const UInt32 index)
{
    editMField(InnerSuperEllipsesWidthFieldMask, _mfInnerSuperEllipsesWidth);

    return _mfInnerSuperEllipsesWidth[index];
}

//! Get the value of the \a index element the MultiLightChunk::_mfInnerSuperEllipsesHeight field.
inline
      Real32  MultiLightChunkBase::getInnerSuperEllipsesHeight(const UInt32 index) const
{
    return _mfInnerSuperEllipsesHeight[index];
}

inline
MFReal32           ::reference MultiLightChunkBase::editInnerSuperEllipsesHeight(const UInt32 index)
{
    editMField(InnerSuperEllipsesHeightFieldMask, _mfInnerSuperEllipsesHeight);

    return _mfInnerSuperEllipsesHeight[index];
}

//! Get the value of the \a index element the MultiLightChunk::_mfOuterSuperEllipsesWidth field.
inline
      Real32  MultiLightChunkBase::getOuterSuperEllipsesWidth(const UInt32 index) const
{
    return _mfOuterSuperEllipsesWidth[index];
}

inline
MFReal32           ::reference MultiLightChunkBase::editOuterSuperEllipsesWidth(const UInt32 index)
{
    editMField(OuterSuperEllipsesWidthFieldMask, _mfOuterSuperEllipsesWidth);

    return _mfOuterSuperEllipsesWidth[index];
}

//! Get the value of the \a index element the MultiLightChunk::_mfOuterSuperEllipsesHeight field.
inline
      Real32  MultiLightChunkBase::getOuterSuperEllipsesHeight(const UInt32 index) const
{
    return _mfOuterSuperEllipsesHeight[index];
}

inline
MFReal32           ::reference MultiLightChunkBase::editOuterSuperEllipsesHeight(const UInt32 index)
{
    editMField(OuterSuperEllipsesHeightFieldMask, _mfOuterSuperEllipsesHeight);

    return _mfOuterSuperEllipsesHeight[index];
}

//! Get the value of the \a index element the MultiLightChunk::_mfSuperEllipsesRoundness field.
inline
      Real32  MultiLightChunkBase::getSuperEllipsesRoundness(const UInt32 index) const
{
    return _mfSuperEllipsesRoundness[index];
}

inline
MFReal32           ::reference MultiLightChunkBase::editSuperEllipsesRoundness(const UInt32 index)
{
    editMField(SuperEllipsesRoundnessFieldMask, _mfSuperEllipsesRoundness);

    return _mfSuperEllipsesRoundness[index];
}

//! Get the value of the \a index element the MultiLightChunk::_mfSuperEllipsesTwist field.
inline
      Real32  MultiLightChunkBase::getSuperEllipsesTwist(const UInt32 index) const
{
    return _mfSuperEllipsesTwist[index];
}

inline
MFReal32           ::reference MultiLightChunkBase::editSuperEllipsesTwist(const UInt32 index)
{
    editMField(SuperEllipsesTwistFieldMask, _mfSuperEllipsesTwist);

    return _mfSuperEllipsesTwist[index];
}

//! Get the value of the \a index element the MultiLightChunk::_mfRangeCutOn field.
inline
      Real32  MultiLightChunkBase::getRangeCutOn(const UInt32 index) const
{
    return _mfRangeCutOn[index];
}

inline
MFReal32           ::reference MultiLightChunkBase::editRangeCutOn(const UInt32 index)
{
    editMField(RangeCutOnFieldMask, _mfRangeCutOn);

    return _mfRangeCutOn[index];
}

//! Get the value of the \a index element the MultiLightChunk::_mfRangeCutOff field.
inline
      Real32  MultiLightChunkBase::getRangeCutOff(const UInt32 index) const
{
    return _mfRangeCutOff[index];
}

inline
MFReal32           ::reference MultiLightChunkBase::editRangeCutOff(const UInt32 index)
{
    editMField(RangeCutOffFieldMask, _mfRangeCutOff);

    return _mfRangeCutOff[index];
}

//! Get the value of the \a index element the MultiLightChunk::_mfRangeNearZone field.
inline
      Real32  MultiLightChunkBase::getRangeNearZone(const UInt32 index) const
{
    return _mfRangeNearZone[index];
}

inline
MFReal32           ::reference MultiLightChunkBase::editRangeNearZone(const UInt32 index)
{
    editMField(RangeNearZoneFieldMask, _mfRangeNearZone);

    return _mfRangeNearZone[index];
}

//! Get the value of the \a index element the MultiLightChunk::_mfRangeFarZone field.
inline
      Real32  MultiLightChunkBase::getRangeFarZone(const UInt32 index) const
{
    return _mfRangeFarZone[index];
}

inline
MFReal32           ::reference MultiLightChunkBase::editRangeFarZone(const UInt32 index)
{
    editMField(RangeFarZoneFieldMask, _mfRangeFarZone);

    return _mfRangeFarZone[index];
}

//! Get the value of the \a index element the MultiLightChunk::_mfType field.
inline
      UInt8  MultiLightChunkBase::getType(const UInt32 index) const
{
    return _mfType[index];
}

inline
MFUInt8            ::reference MultiLightChunkBase::editType(const UInt32 index)
{
    editMField(TypeFieldMask, _mfType);

    return _mfType[index];
}

//! Get the value of the \a index element the MultiLightChunk::_mfEnabled field.
inline
      bool  MultiLightChunkBase::getEnabled(const UInt32 index) const
{
    return _mfEnabled[index];
}

inline
MFBool             ::reference MultiLightChunkBase::editEnabled(const UInt32 index)
{
    editMField(EnabledFieldMask, _mfEnabled);

    return _mfEnabled[index];
}


//! Get the value of the \a index element the MultiLightChunk::_mfBeaconMatrix field.
inline
const Matrix &MultiLightChunkBase::getBeaconMatrix(const UInt32 index) const
{
    return _mfBeaconMatrix[index];
}

inline
MFMatrix           ::reference MultiLightChunkBase::editBeaconMatrix(const UInt32 index)
{
    editMField(BeaconMatrixFieldMask, _mfBeaconMatrix);

    return _mfBeaconMatrix[index];
}


#ifdef OSG_MT_CPTR_ASPECT
inline
void MultiLightChunkBase::execSync (      MultiLightChunkBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (HasWorldToLightSpaceMatrixFieldMask & whichField))
        _sfHasWorldToLightSpaceMatrix.syncWith(pFrom->_sfHasWorldToLightSpaceMatrix);

    if(FieldBits::NoField != (HasLightToWorldSpaceMatrixFieldMask & whichField))
        _sfHasLightToWorldSpaceMatrix.syncWith(pFrom->_sfHasLightToWorldSpaceMatrix);

    if(FieldBits::NoField != (HasEyeToLightSpaceMatrixFieldMask & whichField))
        _sfHasEyeToLightSpaceMatrix.syncWith(pFrom->_sfHasEyeToLightSpaceMatrix);

    if(FieldBits::NoField != (HasLightToEyeSpaceMatrixFieldMask & whichField))
        _sfHasLightToEyeSpaceMatrix.syncWith(pFrom->_sfHasLightToEyeSpaceMatrix);

    if(FieldBits::NoField != (HasLightPerspectiveMatrixFieldMask & whichField))
        _sfHasLightPerspectiveMatrix.syncWith(pFrom->_sfHasLightPerspectiveMatrix);

    if(FieldBits::NoField != (HasInvLightPerspectiveMatrixFieldMask & whichField))
        _sfHasInvLightPerspectiveMatrix.syncWith(pFrom->_sfHasInvLightPerspectiveMatrix);

    if(FieldBits::NoField != (HasColorFieldMask & whichField))
        _sfHasColor.syncWith(pFrom->_sfHasColor);

    if(FieldBits::NoField != (HasIntensityFieldMask & whichField))
        _sfHasIntensity.syncWith(pFrom->_sfHasIntensity);

    if(FieldBits::NoField != (HasSeparateIntensitiesFieldMask & whichField))
        _sfHasSeparateIntensities.syncWith(pFrom->_sfHasSeparateIntensities);

    if(FieldBits::NoField != (HasAttenuationFieldMask & whichField))
        _sfHasAttenuation.syncWith(pFrom->_sfHasAttenuation);

    if(FieldBits::NoField != (AutoCalcRangesFieldMask & whichField))
        _sfAutoCalcRanges.syncWith(pFrom->_sfAutoCalcRanges);

    if(FieldBits::NoField != (HasRangeCutOnFieldMask & whichField))
        _sfHasRangeCutOn.syncWith(pFrom->_sfHasRangeCutOn);

    if(FieldBits::NoField != (HasRangeCutOffFieldMask & whichField))
        _sfHasRangeCutOff.syncWith(pFrom->_sfHasRangeCutOff);

    if(FieldBits::NoField != (HasRangeNearZoneFieldMask & whichField))
        _sfHasRangeNearZone.syncWith(pFrom->_sfHasRangeNearZone);

    if(FieldBits::NoField != (HasRangeFarZoneFieldMask & whichField))
        _sfHasRangeFarZone.syncWith(pFrom->_sfHasRangeFarZone);

    if(FieldBits::NoField != (HasCosSpotlightAngleFieldMask & whichField))
        _sfHasCosSpotlightAngle.syncWith(pFrom->_sfHasCosSpotlightAngle);

    if(FieldBits::NoField != (HasSpotlightAngleFieldMask & whichField))
        _sfHasSpotlightAngle.syncWith(pFrom->_sfHasSpotlightAngle);

    if(FieldBits::NoField != (HasSpotExponentFieldMask & whichField))
        _sfHasSpotExponent.syncWith(pFrom->_sfHasSpotExponent);

    if(FieldBits::NoField != (HasCinemaLightFieldMask & whichField))
        _sfHasCinemaLight.syncWith(pFrom->_sfHasCinemaLight);

    if(FieldBits::NoField != (PositionFieldMask & whichField))
        _mfPosition.syncWith(pFrom->_mfPosition,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (DirectionFieldMask & whichField))
        _mfDirection.syncWith(pFrom->_mfDirection,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (ColorFieldMask & whichField))
        _mfColor.syncWith(pFrom->_mfColor,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (IntensityFieldMask & whichField))
        _mfIntensity.syncWith(pFrom->_mfIntensity,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (AmbientIntensityFieldMask & whichField))
        _mfAmbientIntensity.syncWith(pFrom->_mfAmbientIntensity,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (DiffuseIntensityFieldMask & whichField))
        _mfDiffuseIntensity.syncWith(pFrom->_mfDiffuseIntensity,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (SpecularIntensityFieldMask & whichField))
        _mfSpecularIntensity.syncWith(pFrom->_mfSpecularIntensity,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (AttenuationFieldMask & whichField))
        _mfAttenuation.syncWith(pFrom->_mfAttenuation,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (SpotlightAngleFieldMask & whichField))
        _mfSpotlightAngle.syncWith(pFrom->_mfSpotlightAngle,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (SpotExponentFieldMask & whichField))
        _mfSpotExponent.syncWith(pFrom->_mfSpotExponent,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (InnerSuperEllipsesWidthFieldMask & whichField))
        _mfInnerSuperEllipsesWidth.syncWith(pFrom->_mfInnerSuperEllipsesWidth,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (InnerSuperEllipsesHeightFieldMask & whichField))
        _mfInnerSuperEllipsesHeight.syncWith(pFrom->_mfInnerSuperEllipsesHeight,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (OuterSuperEllipsesWidthFieldMask & whichField))
        _mfOuterSuperEllipsesWidth.syncWith(pFrom->_mfOuterSuperEllipsesWidth,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (OuterSuperEllipsesHeightFieldMask & whichField))
        _mfOuterSuperEllipsesHeight.syncWith(pFrom->_mfOuterSuperEllipsesHeight,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (SuperEllipsesRoundnessFieldMask & whichField))
        _mfSuperEllipsesRoundness.syncWith(pFrom->_mfSuperEllipsesRoundness,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (SuperEllipsesTwistFieldMask & whichField))
        _mfSuperEllipsesTwist.syncWith(pFrom->_mfSuperEllipsesTwist,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (RangeCutOnFieldMask & whichField))
        _mfRangeCutOn.syncWith(pFrom->_mfRangeCutOn,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (RangeCutOffFieldMask & whichField))
        _mfRangeCutOff.syncWith(pFrom->_mfRangeCutOff,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (RangeNearZoneFieldMask & whichField))
        _mfRangeNearZone.syncWith(pFrom->_mfRangeNearZone,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (RangeFarZoneFieldMask & whichField))
        _mfRangeFarZone.syncWith(pFrom->_mfRangeFarZone,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (TypeFieldMask & whichField))
        _mfType.syncWith(pFrom->_mfType,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (EnabledFieldMask & whichField))
        _mfEnabled.syncWith(pFrom->_mfEnabled,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (BeaconFieldMask & whichField))
        _mfBeacon.syncWith(pFrom->_mfBeacon,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (BeaconMatrixFieldMask & whichField))
        _mfBeaconMatrix.syncWith(pFrom->_mfBeaconMatrix,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (EyeSpaceFieldMask & whichField))
        _sfEyeSpace.syncWith(pFrom->_sfEyeSpace);

    if(FieldBits::NoField != (LastCamNearFieldMask & whichField))
        _sfLastCamNear.syncWith(pFrom->_sfLastCamNear);

    if(FieldBits::NoField != (LastCamFarFieldMask & whichField))
        _sfLastCamFar.syncWith(pFrom->_sfLastCamFar);

    if(FieldBits::NoField != (LastCamToWorldFieldMask & whichField))
        _sfLastCamToWorld.syncWith(pFrom->_sfLastCamToWorld);

    if(FieldBits::NoField != (LightBlockNameFieldMask & whichField))
        _sfLightBlockName.syncWith(pFrom->_sfLightBlockName);

    if(FieldBits::NoField != (LightVariableNameFieldMask & whichField))
        _sfLightVariableName.syncWith(pFrom->_sfLightVariableName);
}
#endif


inline
const Char8 *MultiLightChunkBase::getClassname(void)
{
    return "MultiLightChunk";
}
OSG_GEN_CONTAINERPTR(MultiLightChunk);

OSG_END_NAMESPACE

