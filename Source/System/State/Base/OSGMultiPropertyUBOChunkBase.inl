/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class MultiPropertyUBOChunk!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

OSG_BEGIN_NAMESPACE



//! access the type of the class
inline
OSG::FieldContainerType &MultiPropertyUBOChunkBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 MultiPropertyUBOChunkBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 MultiPropertyUBOChunkBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/

//! Get the value of the MultiPropertyUBOChunk::_sfNumProperties field.

inline
UInt32 &MultiPropertyUBOChunkBase::editNumProperties(void)
{
    editSField(NumPropertiesFieldMask);

    return _sfNumProperties.getValue();
}

//! Get the value of the MultiPropertyUBOChunk::_sfNumProperties field.
inline
      UInt32  MultiPropertyUBOChunkBase::getNumProperties(void) const
{
    return _sfNumProperties.getValue();
}

//! Set the value of the MultiPropertyUBOChunk::_sfNumProperties field.
inline
void MultiPropertyUBOChunkBase::setNumProperties(const UInt32 value)
{
    editSField(NumPropertiesFieldMask);

    _sfNumProperties.setValue(value);
}

//! Get the value of the \a index element the MultiPropertyUBOChunk::_mfTypes field.
inline
      UInt8  MultiPropertyUBOChunkBase::getTypes(const UInt32 index) const
{
    return _mfTypes[index];
}

inline
MFUInt8            ::reference MultiPropertyUBOChunkBase::editTypes(const UInt32 index)
{
    editMField(TypesFieldMask, _mfTypes);

    return _mfTypes[index];
}

//! Get the value of the \a index element the MultiPropertyUBOChunk::_mfCardinality field.
inline
      UInt32  MultiPropertyUBOChunkBase::getCardinality(const UInt32 index) const
{
    return _mfCardinality[index];
}

inline
MFUInt32           ::reference MultiPropertyUBOChunkBase::editCardinality(const UInt32 index)
{
    editMField(CardinalityFieldMask, _mfCardinality);

    return _mfCardinality[index];
}

//! Get the value of the \a index element the MultiPropertyUBOChunk::_mfCardinalities field.
inline
      UInt32  MultiPropertyUBOChunkBase::getCardinalities(const UInt32 index) const
{
    return _mfCardinalities[index];
}

inline
MFUInt32           ::reference MultiPropertyUBOChunkBase::editCardinalities(const UInt32 index)
{
    editMField(CardinalitiesFieldMask, _mfCardinalities);

    return _mfCardinalities[index];
}

//! Get the value of the \a index element the MultiPropertyUBOChunk::_mfFloatValues field.
inline
      Real32  MultiPropertyUBOChunkBase::getFloatValues(const UInt32 index) const
{
    return _mfFloatValues[index];
}

inline
MFReal32           ::reference MultiPropertyUBOChunkBase::editFloatValues(const UInt32 index)
{
    editMField(FloatValuesFieldMask, _mfFloatValues);

    return _mfFloatValues[index];
}

//! Get the value of the \a index element the MultiPropertyUBOChunk::_mfDoubleValues field.
inline
      Real64  MultiPropertyUBOChunkBase::getDoubleValues(const UInt32 index) const
{
    return _mfDoubleValues[index];
}

inline
MFReal64           ::reference MultiPropertyUBOChunkBase::editDoubleValues(const UInt32 index)
{
    editMField(DoubleValuesFieldMask, _mfDoubleValues);

    return _mfDoubleValues[index];
}

//! Get the value of the \a index element the MultiPropertyUBOChunk::_mfIntValues field.
inline
      Int32  MultiPropertyUBOChunkBase::getIntValues(const UInt32 index) const
{
    return _mfIntValues[index];
}

inline
MFInt32            ::reference MultiPropertyUBOChunkBase::editIntValues(const UInt32 index)
{
    editMField(IntValuesFieldMask, _mfIntValues);

    return _mfIntValues[index];
}

//! Get the value of the \a index element the MultiPropertyUBOChunk::_mfUIntValues field.
inline
      UInt32  MultiPropertyUBOChunkBase::getUIntValues(const UInt32 index) const
{
    return _mfUIntValues[index];
}

inline
MFUInt32           ::reference MultiPropertyUBOChunkBase::editUIntValues(const UInt32 index)
{
    editMField(UIntValuesFieldMask, _mfUIntValues);

    return _mfUIntValues[index];
}

//! Get the value of the \a index element the MultiPropertyUBOChunk::_mfBoolValues field.
inline
      bool  MultiPropertyUBOChunkBase::getBoolValues(const UInt32 index) const
{
    return _mfBoolValues[index];
}

inline
MFBool             ::reference MultiPropertyUBOChunkBase::editBoolValues(const UInt32 index)
{
    editMField(BoolValuesFieldMask, _mfBoolValues);

    return _mfBoolValues[index];
}

//! Get the value of the \a index element the MultiPropertyUBOChunk::_mfVec3Values field.
inline
const Vec3f &MultiPropertyUBOChunkBase::getVec3Values(const UInt32 index) const
{
    return _mfVec3Values[index];
}

inline
MFVec3f            ::reference MultiPropertyUBOChunkBase::editVec3Values(const UInt32 index)
{
    editMField(Vec3ValuesFieldMask, _mfVec3Values);

    return _mfVec3Values[index];
}

//! Get the value of the \a index element the MultiPropertyUBOChunk::_mfVec4Values field.
inline
const Vec4f &MultiPropertyUBOChunkBase::getVec4Values(const UInt32 index) const
{
    return _mfVec4Values[index];
}

inline
MFVec4f            ::reference MultiPropertyUBOChunkBase::editVec4Values(const UInt32 index)
{
    editMField(Vec4ValuesFieldMask, _mfVec4Values);

    return _mfVec4Values[index];
}

//! Get the value of the \a index element the MultiPropertyUBOChunk::_mfMatrixValues field.
inline
const Matrix &MultiPropertyUBOChunkBase::getMatrixValues(const UInt32 index) const
{
    return _mfMatrixValues[index];
}

inline
MFMatrix           ::reference MultiPropertyUBOChunkBase::editMatrixValues(const UInt32 index)
{
    editMField(MatrixValuesFieldMask, _mfMatrixValues);

    return _mfMatrixValues[index];
}


#ifdef OSG_MT_CPTR_ASPECT
inline
void MultiPropertyUBOChunkBase::execSync (      MultiPropertyUBOChunkBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (TypesFieldMask & whichField))
        _mfTypes.syncWith(pFrom->_mfTypes,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (CardinalityFieldMask & whichField))
        _mfCardinality.syncWith(pFrom->_mfCardinality,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (CardinalitiesFieldMask & whichField))
        _mfCardinalities.syncWith(pFrom->_mfCardinalities,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (NumPropertiesFieldMask & whichField))
        _sfNumProperties.syncWith(pFrom->_sfNumProperties);

    if(FieldBits::NoField != (FloatValuesFieldMask & whichField))
        _mfFloatValues.syncWith(pFrom->_mfFloatValues,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (DoubleValuesFieldMask & whichField))
        _mfDoubleValues.syncWith(pFrom->_mfDoubleValues,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (IntValuesFieldMask & whichField))
        _mfIntValues.syncWith(pFrom->_mfIntValues,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (UIntValuesFieldMask & whichField))
        _mfUIntValues.syncWith(pFrom->_mfUIntValues,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (BoolValuesFieldMask & whichField))
        _mfBoolValues.syncWith(pFrom->_mfBoolValues,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (Vec3ValuesFieldMask & whichField))
        _mfVec3Values.syncWith(pFrom->_mfVec3Values,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (Vec4ValuesFieldMask & whichField))
        _mfVec4Values.syncWith(pFrom->_mfVec4Values,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (MatrixValuesFieldMask & whichField))
        _mfMatrixValues.syncWith(pFrom->_mfMatrixValues,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);
}
#endif


inline
const Char8 *MultiPropertyUBOChunkBase::getClassname(void)
{
    return "MultiPropertyUBOChunk";
}
OSG_GEN_CONTAINERPTR(MultiPropertyUBOChunk);

OSG_END_NAMESPACE

