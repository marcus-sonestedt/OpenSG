/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class MultiPropertySSBOChunk
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGMULTIPROPERTYSSBOCHUNKBASE_H_
#define _OSGMULTIPROPERTYSSBOCHUNKBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGSystemDef.h"

//#include "OSGBaseTypes.h"

#include "OSGShaderStorageBufferObjStdLayoutChunk.h" // Parent

#include "OSGSysFields.h"               // Types type
#include "OSGVecFields.h"               // Vec3Values type
#include "OSGMathFields.h"              // MatrixValues type

#include "OSGMultiPropertySSBOChunkFields.h"

OSG_BEGIN_NAMESPACE


class MultiPropertySSBOChunk;

//! \brief MultiPropertySSBOChunk Base Class.

class OSG_SYSTEM_DLLMAPPING MultiPropertySSBOChunkBase : public ShaderStorageBufferObjStdLayoutChunk
{
  public:

    typedef ShaderStorageBufferObjStdLayoutChunk Inherited;
    typedef ShaderStorageBufferObjStdLayoutChunk ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(MultiPropertySSBOChunk);

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        TypesFieldId = Inherited::NextFieldId,
        CardinalityFieldId = TypesFieldId + 1,
        CardinalitiesFieldId = CardinalityFieldId + 1,
        NumPropertiesFieldId = CardinalitiesFieldId + 1,
        FloatValuesFieldId = NumPropertiesFieldId + 1,
        DoubleValuesFieldId = FloatValuesFieldId + 1,
        IntValuesFieldId = DoubleValuesFieldId + 1,
        UIntValuesFieldId = IntValuesFieldId + 1,
        BoolValuesFieldId = UIntValuesFieldId + 1,
        Vec3ValuesFieldId = BoolValuesFieldId + 1,
        Vec4ValuesFieldId = Vec3ValuesFieldId + 1,
        MatrixValuesFieldId = Vec4ValuesFieldId + 1,
        NextFieldId = MatrixValuesFieldId + 1
    };

    static const OSG::BitVector TypesFieldMask =
        (TypeTraits<BitVector>::One << TypesFieldId);
    static const OSG::BitVector CardinalityFieldMask =
        (TypeTraits<BitVector>::One << CardinalityFieldId);
    static const OSG::BitVector CardinalitiesFieldMask =
        (TypeTraits<BitVector>::One << CardinalitiesFieldId);
    static const OSG::BitVector NumPropertiesFieldMask =
        (TypeTraits<BitVector>::One << NumPropertiesFieldId);
    static const OSG::BitVector FloatValuesFieldMask =
        (TypeTraits<BitVector>::One << FloatValuesFieldId);
    static const OSG::BitVector DoubleValuesFieldMask =
        (TypeTraits<BitVector>::One << DoubleValuesFieldId);
    static const OSG::BitVector IntValuesFieldMask =
        (TypeTraits<BitVector>::One << IntValuesFieldId);
    static const OSG::BitVector UIntValuesFieldMask =
        (TypeTraits<BitVector>::One << UIntValuesFieldId);
    static const OSG::BitVector BoolValuesFieldMask =
        (TypeTraits<BitVector>::One << BoolValuesFieldId);
    static const OSG::BitVector Vec3ValuesFieldMask =
        (TypeTraits<BitVector>::One << Vec3ValuesFieldId);
    static const OSG::BitVector Vec4ValuesFieldMask =
        (TypeTraits<BitVector>::One << Vec4ValuesFieldId);
    static const OSG::BitVector MatrixValuesFieldMask =
        (TypeTraits<BitVector>::One << MatrixValuesFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef MFUInt8           MFTypesType;
    typedef MFUInt32          MFCardinalityType;
    typedef MFUInt32          MFCardinalitiesType;
    typedef SFUInt32          SFNumPropertiesType;
    typedef MFReal32          MFFloatValuesType;
    typedef MFReal64          MFDoubleValuesType;
    typedef MFInt32           MFIntValuesType;
    typedef MFUInt32          MFUIntValuesType;
    typedef MFBool            MFBoolValuesType;
    typedef MFVec3f           MFVec3ValuesType;
    typedef MFVec4f           MFVec4ValuesType;
    typedef MFMatrix          MFMatrixValuesType;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual SizeT  getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  MultiPropertySSBOChunkTransitPtr  create          (void);
    static  MultiPropertySSBOChunk           *createEmpty     (void);

    static  MultiPropertySSBOChunkTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  MultiPropertySSBOChunk            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  MultiPropertySSBOChunkTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    MFUInt8           _mfTypes;
    MFUInt32          _mfCardinality;
    MFUInt32          _mfCardinalities;
    SFUInt32          _sfNumProperties;
    MFReal32          _mfFloatValues;
    MFReal64          _mfDoubleValues;
    MFInt32           _mfIntValues;
    MFUInt32          _mfUIntValues;
    MFBool            _mfBoolValues;
    MFVec3f           _mfVec3Values;
    MFVec4f           _mfVec4Values;
    MFMatrix          _mfMatrixValues;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    MultiPropertySSBOChunkBase(void);
    MultiPropertySSBOChunkBase(const MultiPropertySSBOChunkBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~MultiPropertySSBOChunkBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

     GetFieldHandlePtr  getHandleTypes           (void) const;
     EditFieldHandlePtr editHandleTypes          (void);
     GetFieldHandlePtr  getHandleCardinality     (void) const;
     EditFieldHandlePtr editHandleCardinality    (void);
     GetFieldHandlePtr  getHandleCardinalities   (void) const;
     EditFieldHandlePtr editHandleCardinalities  (void);
     GetFieldHandlePtr  getHandleNumProperties   (void) const;
     EditFieldHandlePtr editHandleNumProperties  (void);
     GetFieldHandlePtr  getHandleFloatValues     (void) const;
     EditFieldHandlePtr editHandleFloatValues    (void);
     GetFieldHandlePtr  getHandleDoubleValues    (void) const;
     EditFieldHandlePtr editHandleDoubleValues   (void);
     GetFieldHandlePtr  getHandleIntValues       (void) const;
     EditFieldHandlePtr editHandleIntValues      (void);
     GetFieldHandlePtr  getHandleUIntValues      (void) const;
     EditFieldHandlePtr editHandleUIntValues     (void);
     GetFieldHandlePtr  getHandleBoolValues      (void) const;
     EditFieldHandlePtr editHandleBoolValues     (void);
     GetFieldHandlePtr  getHandleVec3Values      (void) const;
     EditFieldHandlePtr editHandleVec3Values     (void);
     GetFieldHandlePtr  getHandleVec4Values      (void) const;
     EditFieldHandlePtr editHandleVec4Values     (void);
     GetFieldHandlePtr  getHandleMatrixValues    (void) const;
     EditFieldHandlePtr editHandleMatrixValues   (void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


                  MFUInt8             *editMFTypes          (void);
            const MFUInt8             *getMFTypes           (void) const;

                  MFUInt32            *editMFCardinality    (void);
            const MFUInt32            *getMFCardinality     (void) const;

                  MFUInt32            *editMFCardinalities  (void);
            const MFUInt32            *getMFCardinalities   (void) const;

                  SFUInt32            *editSFNumProperties  (void);
            const SFUInt32            *getSFNumProperties   (void) const;

                  MFReal32            *editMFFloatValues    (void);
            const MFReal32            *getMFFloatValues     (void) const;

                  MFReal64            *editMFDoubleValues   (void);
            const MFReal64            *getMFDoubleValues    (void) const;

                  MFInt32             *editMFIntValues      (void);
            const MFInt32             *getMFIntValues       (void) const;

                  MFUInt32            *editMFUIntValues     (void);
            const MFUInt32            *getMFUIntValues      (void) const;

                  MFBool              *editMFBoolValues     (void);
            const MFBool              *getMFBoolValues      (void) const;

                  MFVec3f             *editMFVec3Values     (void);
            const MFVec3f             *getMFVec3Values      (void) const;

                  MFVec4f             *editMFVec4Values     (void);
            const MFVec4f             *getMFVec4Values      (void) const;

                  MFMatrix            *editMFMatrixValues   (void);
            const MFMatrix            *getMFMatrixValues    (void) const;


                  MFUInt8            ::reference editTypes          (const UInt32 index);
                  UInt8                getTypes           (const UInt32 index) const;

                  MFUInt32           ::reference editCardinality    (const UInt32 index);
                  UInt32               getCardinality     (const UInt32 index) const;

                  MFUInt32           ::reference editCardinalities  (const UInt32 index);
                  UInt32               getCardinalities   (const UInt32 index) const;

                  UInt32              &editNumProperties  (void);
                  UInt32               getNumProperties   (void) const;

                  MFReal32           ::reference editFloatValues    (const UInt32 index);
                  Real32               getFloatValues     (const UInt32 index) const;

                  MFReal64           ::reference editDoubleValues   (const UInt32 index);
                  Real64               getDoubleValues    (const UInt32 index) const;

                  MFInt32            ::reference editIntValues      (const UInt32 index);
                  Int32                getIntValues       (const UInt32 index) const;

                  MFUInt32           ::reference editUIntValues     (const UInt32 index);
                  UInt32               getUIntValues      (const UInt32 index) const;

                  MFBool             ::reference editBoolValues     (const UInt32 index);
                  bool                 getBoolValues      (const UInt32 index) const;

                  MFVec3f            ::reference editVec3Values     (const UInt32 index);
            const Vec3f               &getVec3Values      (const UInt32 index) const;

                  MFVec4f            ::reference editVec4Values     (const UInt32 index);
            const Vec4f               &getVec4Values      (const UInt32 index) const;

                  MFMatrix           ::reference editMatrixValues   (const UInt32 index);
            const Matrix              &getMatrixValues    (const UInt32 index) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setNumProperties  (const UInt32 value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      MultiPropertySSBOChunkBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const MultiPropertySSBOChunkBase &source);
};

typedef MultiPropertySSBOChunkBase *MultiPropertySSBOChunkBaseP;

OSG_END_NAMESPACE

#endif /* _OSGMULTIPROPERTYSSBOCHUNKBASE_H_ */
