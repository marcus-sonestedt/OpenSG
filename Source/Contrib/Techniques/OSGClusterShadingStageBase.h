/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ClusterShadingStage
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGCLUSTERSHADINGSTAGEBASE_H_
#define _OSGCLUSTERSHADINGSTAGEBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGContribTechniquesDef.h"

//#include "OSGBaseTypes.h"

#include "OSGStage.h" // Parent

#include "OSGSysFields.h"               // BlockSize type
#include "OSGBaseFields.h"              // AffectedLightIndexListBlockName type
#include "OSGNodeFields.h"              // FrustNode type
#include "OSGAlgorithmComputeElementFields.h" // FrustAlgoElement type
#include "OSGComputeShaderAlgorithmFields.h" // FrustCompShaderAlgo type
#include "OSGMultiLightChunkFields.h"   // MultiLightChunk type
#include "OSGShaderProgramChunkFields.h" // ShaderProgChunk type

#include "OSGClusterShadingStageFields.h"

OSG_BEGIN_NAMESPACE


class ClusterShadingStage;

//! \brief ClusterShadingStage Base Class.

class OSG_CONTRIBTECHNIQUES_DLLMAPPING ClusterShadingStageBase : public Stage
{
  public:

    typedef Stage Inherited;
    typedef Stage ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(ClusterShadingStage);

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        BlockSizeFieldId = Inherited::NextFieldId,
        TileSizeFieldId = BlockSizeFieldId + 1,
        NumClusterZFieldId = TileSizeFieldId + 1,
        NearPlaneOffsetFieldId = NumClusterZFieldId + 1,
        DispatchDataBindingPntFieldId = NearPlaneOffsetFieldId + 1,
        ClusterDataBindingPntFieldId = DispatchDataBindingPntFieldId + 1,
        LightBindingPntFieldId = ClusterDataBindingPntFieldId + 1,
        AffectedLightIndexListBindingPntFieldId = LightBindingPntFieldId + 1,
        FrustumBindingPntFieldId = AffectedLightIndexListBindingPntFieldId + 1,
        LightIndexListBindingPntFieldId = FrustumBindingPntFieldId + 1,
        LightIndexCounterBindingPntFieldId = LightIndexListBindingPntFieldId + 1,
        LightGridBindingPntFieldId = LightIndexCounterBindingPntFieldId + 1,
        AffectedLightIndexListBlockNameFieldId = LightGridBindingPntFieldId + 1,
        AffectedLightIndexListVariableNameFieldId = AffectedLightIndexListBlockNameFieldId + 1,
        LightIndexListBlockNameFieldId = AffectedLightIndexListVariableNameFieldId + 1,
        LightIndexListVariableNameFieldId = LightIndexListBlockNameFieldId + 1,
        ClusteringDataBlockNameFieldId = LightIndexListVariableNameFieldId + 1,
        ClusteringDataVariableNameFieldId = ClusteringDataBlockNameFieldId + 1,
        LightGridVariableNameFieldId = ClusteringDataVariableNameFieldId + 1,
        CalcFrustumsOnCPUFieldId = LightGridVariableNameFieldId + 1,
        CullLighsOnCPUFieldId = CalcFrustumsOnCPUFieldId + 1,
        DisabledFieldId = CullLighsOnCPUFieldId + 1,
        MaxLightIndexListSizeFieldId = DisabledFieldId + 1,
        MaxClusterLightCountFieldId = MaxLightIndexListSizeFieldId + 1,
        FrustNodeFieldId = MaxClusterLightCountFieldId + 1,
        FrustAlgoElementFieldId = FrustNodeFieldId + 1,
        FrustCompShaderAlgoFieldId = FrustAlgoElementFieldId + 1,
        CullNodeFieldId = FrustCompShaderAlgoFieldId + 1,
        CullAlgoElementFieldId = CullNodeFieldId + 1,
        CullCompShaderAlgoFieldId = CullAlgoElementFieldId + 1,
        MultiLightChunkFieldId = CullCompShaderAlgoFieldId + 1,
        ShaderProgChunkFieldId = MultiLightChunkFieldId + 1,
        NextFieldId = ShaderProgChunkFieldId + 1
    };

    static const OSG::BitVector BlockSizeFieldMask =
        (TypeTraits<BitVector>::One << BlockSizeFieldId);
    static const OSG::BitVector TileSizeFieldMask =
        (TypeTraits<BitVector>::One << TileSizeFieldId);
    static const OSG::BitVector NumClusterZFieldMask =
        (TypeTraits<BitVector>::One << NumClusterZFieldId);
    static const OSG::BitVector NearPlaneOffsetFieldMask =
        (TypeTraits<BitVector>::One << NearPlaneOffsetFieldId);
    static const OSG::BitVector DispatchDataBindingPntFieldMask =
        (TypeTraits<BitVector>::One << DispatchDataBindingPntFieldId);
    static const OSG::BitVector ClusterDataBindingPntFieldMask =
        (TypeTraits<BitVector>::One << ClusterDataBindingPntFieldId);
    static const OSG::BitVector LightBindingPntFieldMask =
        (TypeTraits<BitVector>::One << LightBindingPntFieldId);
    static const OSG::BitVector AffectedLightIndexListBindingPntFieldMask =
        (TypeTraits<BitVector>::One << AffectedLightIndexListBindingPntFieldId);
    static const OSG::BitVector FrustumBindingPntFieldMask =
        (TypeTraits<BitVector>::One << FrustumBindingPntFieldId);
    static const OSG::BitVector LightIndexListBindingPntFieldMask =
        (TypeTraits<BitVector>::One << LightIndexListBindingPntFieldId);
    static const OSG::BitVector LightIndexCounterBindingPntFieldMask =
        (TypeTraits<BitVector>::One << LightIndexCounterBindingPntFieldId);
    static const OSG::BitVector LightGridBindingPntFieldMask =
        (TypeTraits<BitVector>::One << LightGridBindingPntFieldId);
    static const OSG::BitVector AffectedLightIndexListBlockNameFieldMask =
        (TypeTraits<BitVector>::One << AffectedLightIndexListBlockNameFieldId);
    static const OSG::BitVector AffectedLightIndexListVariableNameFieldMask =
        (TypeTraits<BitVector>::One << AffectedLightIndexListVariableNameFieldId);
    static const OSG::BitVector LightIndexListBlockNameFieldMask =
        (TypeTraits<BitVector>::One << LightIndexListBlockNameFieldId);
    static const OSG::BitVector LightIndexListVariableNameFieldMask =
        (TypeTraits<BitVector>::One << LightIndexListVariableNameFieldId);
    static const OSG::BitVector ClusteringDataBlockNameFieldMask =
        (TypeTraits<BitVector>::One << ClusteringDataBlockNameFieldId);
    static const OSG::BitVector ClusteringDataVariableNameFieldMask =
        (TypeTraits<BitVector>::One << ClusteringDataVariableNameFieldId);
    static const OSG::BitVector LightGridVariableNameFieldMask =
        (TypeTraits<BitVector>::One << LightGridVariableNameFieldId);
    static const OSG::BitVector CalcFrustumsOnCPUFieldMask =
        (TypeTraits<BitVector>::One << CalcFrustumsOnCPUFieldId);
    static const OSG::BitVector CullLighsOnCPUFieldMask =
        (TypeTraits<BitVector>::One << CullLighsOnCPUFieldId);
    static const OSG::BitVector DisabledFieldMask =
        (TypeTraits<BitVector>::One << DisabledFieldId);
    static const OSG::BitVector MaxLightIndexListSizeFieldMask =
        (TypeTraits<BitVector>::One << MaxLightIndexListSizeFieldId);
    static const OSG::BitVector MaxClusterLightCountFieldMask =
        (TypeTraits<BitVector>::One << MaxClusterLightCountFieldId);
    static const OSG::BitVector FrustNodeFieldMask =
        (TypeTraits<BitVector>::One << FrustNodeFieldId);
    static const OSG::BitVector FrustAlgoElementFieldMask =
        (TypeTraits<BitVector>::One << FrustAlgoElementFieldId);
    static const OSG::BitVector FrustCompShaderAlgoFieldMask =
        (TypeTraits<BitVector>::One << FrustCompShaderAlgoFieldId);
    static const OSG::BitVector CullNodeFieldMask =
        (TypeTraits<BitVector>::One << CullNodeFieldId);
    static const OSG::BitVector CullAlgoElementFieldMask =
        (TypeTraits<BitVector>::One << CullAlgoElementFieldId);
    static const OSG::BitVector CullCompShaderAlgoFieldMask =
        (TypeTraits<BitVector>::One << CullCompShaderAlgoFieldId);
    static const OSG::BitVector MultiLightChunkFieldMask =
        (TypeTraits<BitVector>::One << MultiLightChunkFieldId);
    static const OSG::BitVector ShaderProgChunkFieldMask =
        (TypeTraits<BitVector>::One << ShaderProgChunkFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef SFUInt32          SFBlockSizeType;
    typedef SFUInt32          SFTileSizeType;
    typedef SFUInt32          SFNumClusterZType;
    typedef SFReal32          SFNearPlaneOffsetType;
    typedef SFUInt32          SFDispatchDataBindingPntType;
    typedef SFUInt32          SFClusterDataBindingPntType;
    typedef SFUInt32          SFLightBindingPntType;
    typedef SFUInt32          SFAffectedLightIndexListBindingPntType;
    typedef SFUInt32          SFFrustumBindingPntType;
    typedef SFUInt32          SFLightIndexListBindingPntType;
    typedef SFUInt32          SFLightIndexCounterBindingPntType;
    typedef SFUInt32          SFLightGridBindingPntType;
    typedef SFString          SFAffectedLightIndexListBlockNameType;
    typedef SFString          SFAffectedLightIndexListVariableNameType;
    typedef SFString          SFLightIndexListBlockNameType;
    typedef SFString          SFLightIndexListVariableNameType;
    typedef SFString          SFClusteringDataBlockNameType;
    typedef SFString          SFClusteringDataVariableNameType;
    typedef SFString          SFLightGridVariableNameType;
    typedef SFBool            SFCalcFrustumsOnCPUType;
    typedef SFBool            SFCullLighsOnCPUType;
    typedef SFBool            SFDisabledType;
    typedef SFUInt32          SFMaxLightIndexListSizeType;
    typedef SFUInt32          SFMaxClusterLightCountType;
    typedef SFUnrecNodePtr    SFFrustNodeType;
    typedef SFUnrecAlgorithmComputeElementPtr SFFrustAlgoElementType;
    typedef SFUnrecComputeShaderAlgorithmPtr SFFrustCompShaderAlgoType;
    typedef SFUnrecNodePtr    SFCullNodeType;
    typedef SFUnrecAlgorithmComputeElementPtr SFCullAlgoElementType;
    typedef SFUnrecComputeShaderAlgorithmPtr SFCullCompShaderAlgoType;
    typedef SFUnrecMultiLightChunkPtr SFMultiLightChunkType;
    typedef SFUnrecShaderProgramChunkPtr SFShaderProgChunkType;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


                  SFUInt32            *editSFBlockSize      (void);
            const SFUInt32            *getSFBlockSize       (void) const;

                  SFUInt32            *editSFTileSize       (void);
            const SFUInt32            *getSFTileSize        (void) const;

                  SFUInt32            *editSFNumClusterZ    (void);
            const SFUInt32            *getSFNumClusterZ     (void) const;

                  SFReal32            *editSFNearPlaneOffset(void);
            const SFReal32            *getSFNearPlaneOffset (void) const;

                  SFUInt32            *editSFDispatchDataBindingPnt(void);
            const SFUInt32            *getSFDispatchDataBindingPnt (void) const;

                  SFUInt32            *editSFClusterDataBindingPnt(void);
            const SFUInt32            *getSFClusterDataBindingPnt (void) const;

                  SFUInt32            *editSFLightBindingPnt(void);
            const SFUInt32            *getSFLightBindingPnt (void) const;

                  SFUInt32            *editSFAffectedLightIndexListBindingPnt(void);
            const SFUInt32            *getSFAffectedLightIndexListBindingPnt (void) const;

                  SFUInt32            *editSFFrustumBindingPnt(void);
            const SFUInt32            *getSFFrustumBindingPnt (void) const;

                  SFUInt32            *editSFLightIndexListBindingPnt(void);
            const SFUInt32            *getSFLightIndexListBindingPnt (void) const;

                  SFUInt32            *editSFLightIndexCounterBindingPnt(void);
            const SFUInt32            *getSFLightIndexCounterBindingPnt (void) const;

                  SFUInt32            *editSFLightGridBindingPnt(void);
            const SFUInt32            *getSFLightGridBindingPnt (void) const;

                  SFString            *editSFAffectedLightIndexListBlockName(void);
            const SFString            *getSFAffectedLightIndexListBlockName (void) const;

                  SFString            *editSFAffectedLightIndexListVariableName(void);
            const SFString            *getSFAffectedLightIndexListVariableName (void) const;

                  SFString            *editSFLightIndexListBlockName(void);
            const SFString            *getSFLightIndexListBlockName (void) const;

                  SFString            *editSFLightIndexListVariableName(void);
            const SFString            *getSFLightIndexListVariableName (void) const;

                  SFString            *editSFClusteringDataBlockName(void);
            const SFString            *getSFClusteringDataBlockName (void) const;

                  SFString            *editSFClusteringDataVariableName(void);
            const SFString            *getSFClusteringDataVariableName (void) const;

                  SFString            *editSFLightGridVariableName(void);
            const SFString            *getSFLightGridVariableName (void) const;

                  SFBool              *editSFCalcFrustumsOnCPU(void);
            const SFBool              *getSFCalcFrustumsOnCPU (void) const;

                  SFBool              *editSFCullLighsOnCPU (void);
            const SFBool              *getSFCullLighsOnCPU  (void) const;

                  SFBool              *editSFDisabled       (void);
            const SFBool              *getSFDisabled        (void) const;

                  SFUInt32            *editSFMaxLightIndexListSize(void);
            const SFUInt32            *getSFMaxLightIndexListSize (void) const;

                  SFUInt32            *editSFMaxClusterLightCount(void);
            const SFUInt32            *getSFMaxClusterLightCount (void) const;
            const SFUnrecMultiLightChunkPtr *getSFMultiLightChunk(void) const;
                  SFUnrecMultiLightChunkPtr *editSFMultiLightChunk(void);


                  UInt32              &editBlockSize      (void);
                  UInt32               getBlockSize       (void) const;

                  UInt32              &editTileSize       (void);
                  UInt32               getTileSize        (void) const;

                  UInt32              &editNumClusterZ    (void);
                  UInt32               getNumClusterZ     (void) const;

                  Real32              &editNearPlaneOffset(void);
                  Real32               getNearPlaneOffset (void) const;

                  UInt32              &editDispatchDataBindingPnt(void);
                  UInt32               getDispatchDataBindingPnt (void) const;

                  UInt32              &editClusterDataBindingPnt(void);
                  UInt32               getClusterDataBindingPnt (void) const;

                  UInt32              &editLightBindingPnt(void);
                  UInt32               getLightBindingPnt (void) const;

                  UInt32              &editAffectedLightIndexListBindingPnt(void);
                  UInt32               getAffectedLightIndexListBindingPnt (void) const;

                  UInt32              &editFrustumBindingPnt(void);
                  UInt32               getFrustumBindingPnt (void) const;

                  UInt32              &editLightIndexListBindingPnt(void);
                  UInt32               getLightIndexListBindingPnt (void) const;

                  UInt32              &editLightIndexCounterBindingPnt(void);
                  UInt32               getLightIndexCounterBindingPnt (void) const;

                  UInt32              &editLightGridBindingPnt(void);
                  UInt32               getLightGridBindingPnt (void) const;

                  std::string         &editAffectedLightIndexListBlockName(void);
            const std::string         &getAffectedLightIndexListBlockName (void) const;

                  std::string         &editAffectedLightIndexListVariableName(void);
            const std::string         &getAffectedLightIndexListVariableName (void) const;

                  std::string         &editLightIndexListBlockName(void);
            const std::string         &getLightIndexListBlockName (void) const;

                  std::string         &editLightIndexListVariableName(void);
            const std::string         &getLightIndexListVariableName (void) const;

                  std::string         &editClusteringDataBlockName(void);
            const std::string         &getClusteringDataBlockName (void) const;

                  std::string         &editClusteringDataVariableName(void);
            const std::string         &getClusteringDataVariableName (void) const;

                  std::string         &editLightGridVariableName(void);
            const std::string         &getLightGridVariableName (void) const;

                  bool                &editCalcFrustumsOnCPU(void);
                  bool                 getCalcFrustumsOnCPU (void) const;

                  bool                &editCullLighsOnCPU (void);
                  bool                 getCullLighsOnCPU  (void) const;

                  bool                &editDisabled       (void);
                  bool                 getDisabled        (void) const;

                  UInt32              &editMaxLightIndexListSize(void);
                  UInt32               getMaxLightIndexListSize (void) const;

                  UInt32              &editMaxClusterLightCount(void);
                  UInt32               getMaxClusterLightCount (void) const;

                  MultiLightChunk * getMultiLightChunk(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setBlockSize      (const UInt32 value);
            void setTileSize       (const UInt32 value);
            void setNumClusterZ    (const UInt32 value);
            void setNearPlaneOffset(const Real32 value);
            void setDispatchDataBindingPnt(const UInt32 value);
            void setClusterDataBindingPnt(const UInt32 value);
            void setLightBindingPnt(const UInt32 value);
            void setAffectedLightIndexListBindingPnt(const UInt32 value);
            void setFrustumBindingPnt(const UInt32 value);
            void setLightIndexListBindingPnt(const UInt32 value);
            void setLightIndexCounterBindingPnt(const UInt32 value);
            void setLightGridBindingPnt(const UInt32 value);
            void setAffectedLightIndexListBlockName(const std::string &value);
            void setAffectedLightIndexListVariableName(const std::string &value);
            void setLightIndexListBlockName(const std::string &value);
            void setLightIndexListVariableName(const std::string &value);
            void setClusteringDataBlockName(const std::string &value);
            void setClusteringDataVariableName(const std::string &value);
            void setLightGridVariableName(const std::string &value);
            void setCalcFrustumsOnCPU(const bool value);
            void setCullLighsOnCPU (const bool value);
            void setDisabled       (const bool value);
            void setMaxLightIndexListSize(const UInt32 value);
            void setMaxClusterLightCount(const UInt32 value);
            void setMultiLightChunk(MultiLightChunk * const value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr Field Set                                 */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual SizeT  getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  ClusterShadingStageTransitPtr  create          (void);
    static  ClusterShadingStage           *createEmpty     (void);

    static  ClusterShadingStageTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  ClusterShadingStage            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  ClusterShadingStageTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFUInt32          _sfBlockSize;
    SFUInt32          _sfTileSize;
    SFUInt32          _sfNumClusterZ;
    SFReal32          _sfNearPlaneOffset;
    SFUInt32          _sfDispatchDataBindingPnt;
    SFUInt32          _sfClusterDataBindingPnt;
    SFUInt32          _sfLightBindingPnt;
    SFUInt32          _sfAffectedLightIndexListBindingPnt;
    SFUInt32          _sfFrustumBindingPnt;
    SFUInt32          _sfLightIndexListBindingPnt;
    SFUInt32          _sfLightIndexCounterBindingPnt;
    SFUInt32          _sfLightGridBindingPnt;
    SFString          _sfAffectedLightIndexListBlockName;
    SFString          _sfAffectedLightIndexListVariableName;
    SFString          _sfLightIndexListBlockName;
    SFString          _sfLightIndexListVariableName;
    SFString          _sfClusteringDataBlockName;
    SFString          _sfClusteringDataVariableName;
    SFString          _sfLightGridVariableName;
    SFBool            _sfCalcFrustumsOnCPU;
    SFBool            _sfCullLighsOnCPU;
    SFBool            _sfDisabled;
    SFUInt32          _sfMaxLightIndexListSize;
    SFUInt32          _sfMaxClusterLightCount;
    SFUnrecNodePtr    _sfFrustNode;
    SFUnrecAlgorithmComputeElementPtr _sfFrustAlgoElement;
    SFUnrecComputeShaderAlgorithmPtr _sfFrustCompShaderAlgo;
    SFUnrecNodePtr    _sfCullNode;
    SFUnrecAlgorithmComputeElementPtr _sfCullAlgoElement;
    SFUnrecComputeShaderAlgorithmPtr _sfCullCompShaderAlgo;
    SFUnrecMultiLightChunkPtr _sfMultiLightChunk;
    SFUnrecShaderProgramChunkPtr _sfShaderProgChunk;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    ClusterShadingStageBase(void);
    ClusterShadingStageBase(const ClusterShadingStageBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~ClusterShadingStageBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */

    void onCreate(const ClusterShadingStage *source = NULL);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

     GetFieldHandlePtr  getHandleBlockSize       (void) const;
     EditFieldHandlePtr editHandleBlockSize      (void);
     GetFieldHandlePtr  getHandleTileSize        (void) const;
     EditFieldHandlePtr editHandleTileSize       (void);
     GetFieldHandlePtr  getHandleNumClusterZ     (void) const;
     EditFieldHandlePtr editHandleNumClusterZ    (void);
     GetFieldHandlePtr  getHandleNearPlaneOffset (void) const;
     EditFieldHandlePtr editHandleNearPlaneOffset(void);
     GetFieldHandlePtr  getHandleDispatchDataBindingPnt (void) const;
     EditFieldHandlePtr editHandleDispatchDataBindingPnt(void);
     GetFieldHandlePtr  getHandleClusterDataBindingPnt (void) const;
     EditFieldHandlePtr editHandleClusterDataBindingPnt(void);
     GetFieldHandlePtr  getHandleLightBindingPnt (void) const;
     EditFieldHandlePtr editHandleLightBindingPnt(void);
     GetFieldHandlePtr  getHandleAffectedLightIndexListBindingPnt (void) const;
     EditFieldHandlePtr editHandleAffectedLightIndexListBindingPnt(void);
     GetFieldHandlePtr  getHandleFrustumBindingPnt (void) const;
     EditFieldHandlePtr editHandleFrustumBindingPnt(void);
     GetFieldHandlePtr  getHandleLightIndexListBindingPnt (void) const;
     EditFieldHandlePtr editHandleLightIndexListBindingPnt(void);
     GetFieldHandlePtr  getHandleLightIndexCounterBindingPnt (void) const;
     EditFieldHandlePtr editHandleLightIndexCounterBindingPnt(void);
     GetFieldHandlePtr  getHandleLightGridBindingPnt (void) const;
     EditFieldHandlePtr editHandleLightGridBindingPnt(void);
     GetFieldHandlePtr  getHandleAffectedLightIndexListBlockName (void) const;
     EditFieldHandlePtr editHandleAffectedLightIndexListBlockName(void);
     GetFieldHandlePtr  getHandleAffectedLightIndexListVariableName (void) const;
     EditFieldHandlePtr editHandleAffectedLightIndexListVariableName(void);
     GetFieldHandlePtr  getHandleLightIndexListBlockName (void) const;
     EditFieldHandlePtr editHandleLightIndexListBlockName(void);
     GetFieldHandlePtr  getHandleLightIndexListVariableName (void) const;
     EditFieldHandlePtr editHandleLightIndexListVariableName(void);
     GetFieldHandlePtr  getHandleClusteringDataBlockName (void) const;
     EditFieldHandlePtr editHandleClusteringDataBlockName(void);
     GetFieldHandlePtr  getHandleClusteringDataVariableName (void) const;
     EditFieldHandlePtr editHandleClusteringDataVariableName(void);
     GetFieldHandlePtr  getHandleLightGridVariableName (void) const;
     EditFieldHandlePtr editHandleLightGridVariableName(void);
     GetFieldHandlePtr  getHandleCalcFrustumsOnCPU (void) const;
     EditFieldHandlePtr editHandleCalcFrustumsOnCPU(void);
     GetFieldHandlePtr  getHandleCullLighsOnCPU  (void) const;
     EditFieldHandlePtr editHandleCullLighsOnCPU (void);
     GetFieldHandlePtr  getHandleDisabled        (void) const;
     EditFieldHandlePtr editHandleDisabled       (void);
     GetFieldHandlePtr  getHandleMaxLightIndexListSize (void) const;
     EditFieldHandlePtr editHandleMaxLightIndexListSize(void);
     GetFieldHandlePtr  getHandleMaxClusterLightCount (void) const;
     EditFieldHandlePtr editHandleMaxClusterLightCount(void);
     GetFieldHandlePtr  getHandleFrustNode       (void) const;
     EditFieldHandlePtr editHandleFrustNode      (void);
     GetFieldHandlePtr  getHandleFrustAlgoElement (void) const;
     EditFieldHandlePtr editHandleFrustAlgoElement(void);
     GetFieldHandlePtr  getHandleFrustCompShaderAlgo (void) const;
     EditFieldHandlePtr editHandleFrustCompShaderAlgo(void);
     GetFieldHandlePtr  getHandleCullNode        (void) const;
     EditFieldHandlePtr editHandleCullNode       (void);
     GetFieldHandlePtr  getHandleCullAlgoElement (void) const;
     EditFieldHandlePtr editHandleCullAlgoElement(void);
     GetFieldHandlePtr  getHandleCullCompShaderAlgo (void) const;
     EditFieldHandlePtr editHandleCullCompShaderAlgo(void);
     GetFieldHandlePtr  getHandleMultiLightChunk (void) const;
     EditFieldHandlePtr editHandleMultiLightChunk(void);
     GetFieldHandlePtr  getHandleShaderProgChunk (void) const;
     EditFieldHandlePtr editHandleShaderProgChunk(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

            const SFUnrecNodePtr      *getSFFrustNode       (void) const;
                  SFUnrecNodePtr      *editSFFrustNode      (void);
            const SFUnrecAlgorithmComputeElementPtr *getSFFrustAlgoElement (void) const;
                  SFUnrecAlgorithmComputeElementPtr *editSFFrustAlgoElement(void);
            const SFUnrecComputeShaderAlgorithmPtr *getSFFrustCompShaderAlgo (void) const;
                  SFUnrecComputeShaderAlgorithmPtr *editSFFrustCompShaderAlgo(void);
            const SFUnrecNodePtr      *getSFCullNode        (void) const;
                  SFUnrecNodePtr      *editSFCullNode       (void);
            const SFUnrecAlgorithmComputeElementPtr *getSFCullAlgoElement (void) const;
                  SFUnrecAlgorithmComputeElementPtr *editSFCullAlgoElement(void);
            const SFUnrecComputeShaderAlgorithmPtr *getSFCullCompShaderAlgo (void) const;
                  SFUnrecComputeShaderAlgorithmPtr *editSFCullCompShaderAlgo(void);
            const SFUnrecShaderProgramChunkPtr *getSFShaderProgChunk (void) const;
                  SFUnrecShaderProgramChunkPtr *editSFShaderProgChunk(void);


                  Node * getFrustNode      (void) const;

                  AlgorithmComputeElement * getFrustAlgoElement(void) const;

                  ComputeShaderAlgorithm * getFrustCompShaderAlgo(void) const;

                  Node * getCullNode       (void) const;

                  AlgorithmComputeElement * getCullAlgoElement(void) const;

                  ComputeShaderAlgorithm * getCullCompShaderAlgo(void) const;

                  ShaderProgramChunk * getShaderProgChunk(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setFrustNode      (Node * const value);
            void setFrustAlgoElement(AlgorithmComputeElement * const value);
            void setFrustCompShaderAlgo(ComputeShaderAlgorithm * const value);
            void setCullNode       (Node * const value);
            void setCullAlgoElement(AlgorithmComputeElement * const value);
            void setCullCompShaderAlgo(ComputeShaderAlgorithm * const value);
            void setShaderProgChunk(ShaderProgramChunk * const value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      ClusterShadingStageBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const ClusterShadingStageBase &source);
};

typedef ClusterShadingStageBase *ClusterShadingStageBaseP;

typedef CoredNodeRefPtr  <ClusterShadingStage> ClusterShadingStageNodeRefPtr;
typedef CoredNodeMTRefPtr<ClusterShadingStage> ClusterShadingStageNodeMTRefPtr;

OSG_END_NAMESPACE

#endif /* _OSGCLUSTERSHADINGSTAGEBASE_H_ */
