/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ClusterShadingStageData!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

OSG_BEGIN_NAMESPACE



//! access the type of the class
inline
OSG::FieldContainerType &ClusterShadingStageDataBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 ClusterShadingStageDataBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 ClusterShadingStageDataBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/

//! Get the value of the ClusterShadingStageData::_sfLeft field.

inline
Int32 &ClusterShadingStageDataBase::editLeft(void)
{
    editSField(LeftFieldMask);

    return _sfLeft.getValue();
}

//! Get the value of the ClusterShadingStageData::_sfLeft field.
inline
      Int32  ClusterShadingStageDataBase::getLeft(void) const
{
    return _sfLeft.getValue();
}

//! Set the value of the ClusterShadingStageData::_sfLeft field.
inline
void ClusterShadingStageDataBase::setLeft(const Int32 value)
{
    editSField(LeftFieldMask);

    _sfLeft.setValue(value);
}
//! Get the value of the ClusterShadingStageData::_sfBottom field.

inline
Int32 &ClusterShadingStageDataBase::editBottom(void)
{
    editSField(BottomFieldMask);

    return _sfBottom.getValue();
}

//! Get the value of the ClusterShadingStageData::_sfBottom field.
inline
      Int32  ClusterShadingStageDataBase::getBottom(void) const
{
    return _sfBottom.getValue();
}

//! Set the value of the ClusterShadingStageData::_sfBottom field.
inline
void ClusterShadingStageDataBase::setBottom(const Int32 value)
{
    editSField(BottomFieldMask);

    _sfBottom.setValue(value);
}
//! Get the value of the ClusterShadingStageData::_sfWidth field.

inline
Int32 &ClusterShadingStageDataBase::editWidth(void)
{
    editSField(WidthFieldMask);

    return _sfWidth.getValue();
}

//! Get the value of the ClusterShadingStageData::_sfWidth field.
inline
      Int32  ClusterShadingStageDataBase::getWidth(void) const
{
    return _sfWidth.getValue();
}

//! Set the value of the ClusterShadingStageData::_sfWidth field.
inline
void ClusterShadingStageDataBase::setWidth(const Int32 value)
{
    editSField(WidthFieldMask);

    _sfWidth.setValue(value);
}
//! Get the value of the ClusterShadingStageData::_sfHeight field.

inline
Int32 &ClusterShadingStageDataBase::editHeight(void)
{
    editSField(HeightFieldMask);

    return _sfHeight.getValue();
}

//! Get the value of the ClusterShadingStageData::_sfHeight field.
inline
      Int32  ClusterShadingStageDataBase::getHeight(void) const
{
    return _sfHeight.getValue();
}

//! Set the value of the ClusterShadingStageData::_sfHeight field.
inline
void ClusterShadingStageDataBase::setHeight(const Int32 value)
{
    editSField(HeightFieldMask);

    _sfHeight.setValue(value);
}
//! Get the value of the ClusterShadingStageData::_sfIsOrthographicCamera field.

inline
bool &ClusterShadingStageDataBase::editIsOrthographicCamera(void)
{
    editSField(IsOrthographicCameraFieldMask);

    return _sfIsOrthographicCamera.getValue();
}

//! Get the value of the ClusterShadingStageData::_sfIsOrthographicCamera field.
inline
      bool  ClusterShadingStageDataBase::getIsOrthographicCamera(void) const
{
    return _sfIsOrthographicCamera.getValue();
}

//! Set the value of the ClusterShadingStageData::_sfIsOrthographicCamera field.
inline
void ClusterShadingStageDataBase::setIsOrthographicCamera(const bool value)
{
    editSField(IsOrthographicCameraFieldMask);

    _sfIsOrthographicCamera.setValue(value);
}

//! Get the value of the \a index element the ClusterShadingStageData::_mfFrustumPlanesNormals field.
inline
const Matrix &ClusterShadingStageDataBase::getFrustumPlanesNormals(const UInt32 index) const
{
    return _mfFrustumPlanesNormals[index];
}

inline
MFMatrix           ::reference ClusterShadingStageDataBase::editFrustumPlanesNormals(const UInt32 index)
{
    editMField(FrustumPlanesNormalsFieldMask, _mfFrustumPlanesNormals);

    return _mfFrustumPlanesNormals[index];
}

//! Get the value of the \a index element the ClusterShadingStageData::_mfFrustumPlanesDistances field.
inline
const Vec4f &ClusterShadingStageDataBase::getFrustumPlanesDistances(const UInt32 index) const
{
    return _mfFrustumPlanesDistances[index];
}

inline
MFVec4f            ::reference ClusterShadingStageDataBase::editFrustumPlanesDistances(const UInt32 index)
{
    editMField(FrustumPlanesDistancesFieldMask, _mfFrustumPlanesDistances);

    return _mfFrustumPlanesDistances[index];
}


#ifdef OSG_MT_CPTR_ASPECT
inline
void ClusterShadingStageDataBase::execSync (      ClusterShadingStageDataBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (FrustDispDatUBOChunkFieldMask & whichField))
        _sfFrustDispDatUBOChunk.syncWith(pFrom->_sfFrustDispDatUBOChunk);

    if(FieldBits::NoField != (CullDispDatUBOChunkFieldMask & whichField))
        _sfCullDispDatUBOChunk.syncWith(pFrom->_sfCullDispDatUBOChunk);

    if(FieldBits::NoField != (CullClusterDatUBOChunkFieldMask & whichField))
        _sfCullClusterDatUBOChunk.syncWith(pFrom->_sfCullClusterDatUBOChunk);

    if(FieldBits::NoField != (CullLightIndexCounterSSBOChunkFieldMask & whichField))
        _sfCullLightIndexCounterSSBOChunk.syncWith(pFrom->_sfCullLightIndexCounterSSBOChunk);

    if(FieldBits::NoField != (FrustumsSSBOChunkFieldMask & whichField))
        _sfFrustumsSSBOChunk.syncWith(pFrom->_sfFrustumsSSBOChunk);

    if(FieldBits::NoField != (AffectedLightIndexListSSBOChunkFieldMask & whichField))
        _sfAffectedLightIndexListSSBOChunk.syncWith(pFrom->_sfAffectedLightIndexListSSBOChunk);

    if(FieldBits::NoField != (LightIndexListSSBOChunkFieldMask & whichField))
        _sfLightIndexListSSBOChunk.syncWith(pFrom->_sfLightIndexListSSBOChunk);

    if(FieldBits::NoField != (FrustChunkMatFieldMask & whichField))
        _sfFrustChunkMat.syncWith(pFrom->_sfFrustChunkMat);

    if(FieldBits::NoField != (CullChunkMatFieldMask & whichField))
        _sfCullChunkMat.syncWith(pFrom->_sfCullChunkMat);

    if(FieldBits::NoField != (LightGridImageFieldMask & whichField))
        _sfLightGridImage.syncWith(pFrom->_sfLightGridImage);

    if(FieldBits::NoField != (LightGridTexObjChunkFieldMask & whichField))
        _sfLightGridTexObjChunk.syncWith(pFrom->_sfLightGridTexObjChunk);

    if(FieldBits::NoField != (LightGridTexImgChunkCSFieldMask & whichField))
        _sfLightGridTexImgChunkCS.syncWith(pFrom->_sfLightGridTexImgChunkCS);

    if(FieldBits::NoField != (LightGridTexImgChunkFSFieldMask & whichField))
        _sfLightGridTexImgChunkFS.syncWith(pFrom->_sfLightGridTexImgChunkFS);

    if(FieldBits::NoField != (FrustumPlanesNormalsFieldMask & whichField))
        _mfFrustumPlanesNormals.syncWith(pFrom->_mfFrustumPlanesNormals,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (FrustumPlanesDistancesFieldMask & whichField))
        _mfFrustumPlanesDistances.syncWith(pFrom->_mfFrustumPlanesDistances,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (LeftFieldMask & whichField))
        _sfLeft.syncWith(pFrom->_sfLeft);

    if(FieldBits::NoField != (BottomFieldMask & whichField))
        _sfBottom.syncWith(pFrom->_sfBottom);

    if(FieldBits::NoField != (WidthFieldMask & whichField))
        _sfWidth.syncWith(pFrom->_sfWidth);

    if(FieldBits::NoField != (HeightFieldMask & whichField))
        _sfHeight.syncWith(pFrom->_sfHeight);

    if(FieldBits::NoField != (IsOrthographicCameraFieldMask & whichField))
        _sfIsOrthographicCamera.syncWith(pFrom->_sfIsOrthographicCamera);
}
#endif


inline
const Char8 *ClusterShadingStageDataBase::getClassname(void)
{
    return "ClusterShadingStageData";
}
OSG_GEN_CONTAINERPTR(ClusterShadingStageData);

OSG_END_NAMESPACE

