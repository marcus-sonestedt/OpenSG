/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ClusterShadingStageData
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGCLUSTERSHADINGSTAGEDATABASE_H_
#define _OSGCLUSTERSHADINGSTAGEDATABASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGContribTechniquesDef.h"

//#include "OSGBaseTypes.h"

#include "OSGStageData.h" // Parent

#include "OSGUniformBufferObjStd140ChunkFields.h" // FrustDispDatUBOChunk type
#include "OSGShaderStorageBufferObjStdLayoutChunkFields.h" // CullLightIndexCounterSSBOChunk type
#include "OSGChunkMaterialFields.h"     // FrustChunkMat type
#include "OSGImageFields.h"             // LightGridImage type
#include "OSGTextureObjChunkFields.h"   // LightGridTexObjChunk type
#include "OSGTextureImageChunkFields.h" // LightGridTexImgChunkCS type
#include "OSGMathFields.h"              // FrustumPlanesNormals type
#include "OSGVecFields.h"               // FrustumPlanesDistances type
#include "OSGSysFields.h"               // Left type

#include "OSGClusterShadingStageDataFields.h"

OSG_BEGIN_NAMESPACE


class ClusterShadingStageData;

//! \brief ClusterShadingStageData Base Class.

class OSG_CONTRIBTECHNIQUES_DLLMAPPING ClusterShadingStageDataBase : public StageData
{
  public:

    typedef StageData Inherited;
    typedef StageData ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(ClusterShadingStageData);

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        FrustDispDatUBOChunkFieldId = Inherited::NextFieldId,
        CullDispDatUBOChunkFieldId = FrustDispDatUBOChunkFieldId + 1,
        CullClusterDatUBOChunkFieldId = CullDispDatUBOChunkFieldId + 1,
        CullLightIndexCounterSSBOChunkFieldId = CullClusterDatUBOChunkFieldId + 1,
        FrustumsSSBOChunkFieldId = CullLightIndexCounterSSBOChunkFieldId + 1,
        AffectedLightIndexListSSBOChunkFieldId = FrustumsSSBOChunkFieldId + 1,
        LightIndexListSSBOChunkFieldId = AffectedLightIndexListSSBOChunkFieldId + 1,
        FrustChunkMatFieldId = LightIndexListSSBOChunkFieldId + 1,
        CullChunkMatFieldId = FrustChunkMatFieldId + 1,
        LightGridImageFieldId = CullChunkMatFieldId + 1,
        LightGridTexObjChunkFieldId = LightGridImageFieldId + 1,
        LightGridTexImgChunkCSFieldId = LightGridTexObjChunkFieldId + 1,
        LightGridTexImgChunkFSFieldId = LightGridTexImgChunkCSFieldId + 1,
        FrustumPlanesNormalsFieldId = LightGridTexImgChunkFSFieldId + 1,
        FrustumPlanesDistancesFieldId = FrustumPlanesNormalsFieldId + 1,
        LeftFieldId = FrustumPlanesDistancesFieldId + 1,
        BottomFieldId = LeftFieldId + 1,
        WidthFieldId = BottomFieldId + 1,
        HeightFieldId = WidthFieldId + 1,
        IsOrthographicCameraFieldId = HeightFieldId + 1,
        NextFieldId = IsOrthographicCameraFieldId + 1
    };

    static const OSG::BitVector FrustDispDatUBOChunkFieldMask =
        (TypeTraits<BitVector>::One << FrustDispDatUBOChunkFieldId);
    static const OSG::BitVector CullDispDatUBOChunkFieldMask =
        (TypeTraits<BitVector>::One << CullDispDatUBOChunkFieldId);
    static const OSG::BitVector CullClusterDatUBOChunkFieldMask =
        (TypeTraits<BitVector>::One << CullClusterDatUBOChunkFieldId);
    static const OSG::BitVector CullLightIndexCounterSSBOChunkFieldMask =
        (TypeTraits<BitVector>::One << CullLightIndexCounterSSBOChunkFieldId);
    static const OSG::BitVector FrustumsSSBOChunkFieldMask =
        (TypeTraits<BitVector>::One << FrustumsSSBOChunkFieldId);
    static const OSG::BitVector AffectedLightIndexListSSBOChunkFieldMask =
        (TypeTraits<BitVector>::One << AffectedLightIndexListSSBOChunkFieldId);
    static const OSG::BitVector LightIndexListSSBOChunkFieldMask =
        (TypeTraits<BitVector>::One << LightIndexListSSBOChunkFieldId);
    static const OSG::BitVector FrustChunkMatFieldMask =
        (TypeTraits<BitVector>::One << FrustChunkMatFieldId);
    static const OSG::BitVector CullChunkMatFieldMask =
        (TypeTraits<BitVector>::One << CullChunkMatFieldId);
    static const OSG::BitVector LightGridImageFieldMask =
        (TypeTraits<BitVector>::One << LightGridImageFieldId);
    static const OSG::BitVector LightGridTexObjChunkFieldMask =
        (TypeTraits<BitVector>::One << LightGridTexObjChunkFieldId);
    static const OSG::BitVector LightGridTexImgChunkCSFieldMask =
        (TypeTraits<BitVector>::One << LightGridTexImgChunkCSFieldId);
    static const OSG::BitVector LightGridTexImgChunkFSFieldMask =
        (TypeTraits<BitVector>::One << LightGridTexImgChunkFSFieldId);
    static const OSG::BitVector FrustumPlanesNormalsFieldMask =
        (TypeTraits<BitVector>::One << FrustumPlanesNormalsFieldId);
    static const OSG::BitVector FrustumPlanesDistancesFieldMask =
        (TypeTraits<BitVector>::One << FrustumPlanesDistancesFieldId);
    static const OSG::BitVector LeftFieldMask =
        (TypeTraits<BitVector>::One << LeftFieldId);
    static const OSG::BitVector BottomFieldMask =
        (TypeTraits<BitVector>::One << BottomFieldId);
    static const OSG::BitVector WidthFieldMask =
        (TypeTraits<BitVector>::One << WidthFieldId);
    static const OSG::BitVector HeightFieldMask =
        (TypeTraits<BitVector>::One << HeightFieldId);
    static const OSG::BitVector IsOrthographicCameraFieldMask =
        (TypeTraits<BitVector>::One << IsOrthographicCameraFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef SFUnrecUniformBufferObjStd140ChunkPtr SFFrustDispDatUBOChunkType;
    typedef SFUnrecUniformBufferObjStd140ChunkPtr SFCullDispDatUBOChunkType;
    typedef SFUnrecUniformBufferObjStd140ChunkPtr SFCullClusterDatUBOChunkType;
    typedef SFUnrecShaderStorageBufferObjStdLayoutChunkPtr SFCullLightIndexCounterSSBOChunkType;
    typedef SFUnrecShaderStorageBufferObjStdLayoutChunkPtr SFFrustumsSSBOChunkType;
    typedef SFUnrecShaderStorageBufferObjStdLayoutChunkPtr SFAffectedLightIndexListSSBOChunkType;
    typedef SFUnrecShaderStorageBufferObjStdLayoutChunkPtr SFLightIndexListSSBOChunkType;
    typedef SFUnrecChunkMaterialPtr SFFrustChunkMatType;
    typedef SFUnrecChunkMaterialPtr SFCullChunkMatType;
    typedef SFUnrecImagePtr   SFLightGridImageType;
    typedef SFUnrecTextureObjChunkPtr SFLightGridTexObjChunkType;
    typedef SFUnrecTextureImageChunkPtr SFLightGridTexImgChunkCSType;
    typedef SFUnrecTextureImageChunkPtr SFLightGridTexImgChunkFSType;
    typedef MFMatrix          MFFrustumPlanesNormalsType;
    typedef MFVec4f           MFFrustumPlanesDistancesType;
    typedef SFInt32           SFLeftType;
    typedef SFInt32           SFBottomType;
    typedef SFInt32           SFWidthType;
    typedef SFInt32           SFHeightType;
    typedef SFBool            SFIsOrthographicCameraType;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

            const SFUnrecUniformBufferObjStd140ChunkPtr *getSFFrustDispDatUBOChunk(void) const;
                  SFUnrecUniformBufferObjStd140ChunkPtr *editSFFrustDispDatUBOChunk(void);
            const SFUnrecUniformBufferObjStd140ChunkPtr *getSFCullDispDatUBOChunk(void) const;
                  SFUnrecUniformBufferObjStd140ChunkPtr *editSFCullDispDatUBOChunk(void);
            const SFUnrecUniformBufferObjStd140ChunkPtr *getSFCullClusterDatUBOChunk(void) const;
                  SFUnrecUniformBufferObjStd140ChunkPtr *editSFCullClusterDatUBOChunk(void);
            const SFUnrecShaderStorageBufferObjStdLayoutChunkPtr *getSFCullLightIndexCounterSSBOChunk(void) const;
                  SFUnrecShaderStorageBufferObjStdLayoutChunkPtr *editSFCullLightIndexCounterSSBOChunk(void);
            const SFUnrecShaderStorageBufferObjStdLayoutChunkPtr *getSFFrustumsSSBOChunk(void) const;
                  SFUnrecShaderStorageBufferObjStdLayoutChunkPtr *editSFFrustumsSSBOChunk(void);
            const SFUnrecShaderStorageBufferObjStdLayoutChunkPtr *getSFAffectedLightIndexListSSBOChunk(void) const;
                  SFUnrecShaderStorageBufferObjStdLayoutChunkPtr *editSFAffectedLightIndexListSSBOChunk(void);
            const SFUnrecShaderStorageBufferObjStdLayoutChunkPtr *getSFLightIndexListSSBOChunk(void) const;
                  SFUnrecShaderStorageBufferObjStdLayoutChunkPtr *editSFLightIndexListSSBOChunk(void);
            const SFUnrecChunkMaterialPtr *getSFFrustChunkMat  (void) const;
                  SFUnrecChunkMaterialPtr *editSFFrustChunkMat  (void);
            const SFUnrecChunkMaterialPtr *getSFCullChunkMat   (void) const;
                  SFUnrecChunkMaterialPtr *editSFCullChunkMat   (void);
            const SFUnrecImagePtr     *getSFLightGridImage (void) const;
                  SFUnrecImagePtr     *editSFLightGridImage (void);
            const SFUnrecTextureObjChunkPtr *getSFLightGridTexObjChunk(void) const;
                  SFUnrecTextureObjChunkPtr *editSFLightGridTexObjChunk(void);
            const SFUnrecTextureImageChunkPtr *getSFLightGridTexImgChunkCS(void) const;
                  SFUnrecTextureImageChunkPtr *editSFLightGridTexImgChunkCS(void);
            const SFUnrecTextureImageChunkPtr *getSFLightGridTexImgChunkFS(void) const;
                  SFUnrecTextureImageChunkPtr *editSFLightGridTexImgChunkFS(void);

                  MFMatrix            *editMFFrustumPlanesNormals(void);
            const MFMatrix            *getMFFrustumPlanesNormals (void) const;

                  MFVec4f             *editMFFrustumPlanesDistances(void);
            const MFVec4f             *getMFFrustumPlanesDistances (void) const;

                  SFInt32             *editSFLeft           (void);
            const SFInt32             *getSFLeft            (void) const;

                  SFInt32             *editSFBottom         (void);
            const SFInt32             *getSFBottom          (void) const;

                  SFInt32             *editSFWidth          (void);
            const SFInt32             *getSFWidth           (void) const;

                  SFInt32             *editSFHeight         (void);
            const SFInt32             *getSFHeight          (void) const;

                  SFBool              *editSFIsOrthographicCamera(void);
            const SFBool              *getSFIsOrthographicCamera (void) const;


                  UniformBufferObjStd140Chunk * getFrustDispDatUBOChunk(void) const;

                  UniformBufferObjStd140Chunk * getCullDispDatUBOChunk(void) const;

                  UniformBufferObjStd140Chunk * getCullClusterDatUBOChunk(void) const;

                  ShaderStorageBufferObjStdLayoutChunk * getCullLightIndexCounterSSBOChunk(void) const;

                  ShaderStorageBufferObjStdLayoutChunk * getFrustumsSSBOChunk(void) const;

                  ShaderStorageBufferObjStdLayoutChunk * getAffectedLightIndexListSSBOChunk(void) const;

                  ShaderStorageBufferObjStdLayoutChunk * getLightIndexListSSBOChunk(void) const;

                  ChunkMaterial * getFrustChunkMat  (void) const;

                  ChunkMaterial * getCullChunkMat   (void) const;

                  Image * getLightGridImage (void) const;

                  TextureObjChunk * getLightGridTexObjChunk(void) const;

                  TextureImageChunk * getLightGridTexImgChunkCS(void) const;

                  TextureImageChunk * getLightGridTexImgChunkFS(void) const;

            MFMatrix           ::reference       editFrustumPlanesNormals(const UInt32 index);
            const Matrix              &getFrustumPlanesNormals (const UInt32 index) const;

            MFVec4f            ::reference       editFrustumPlanesDistances(const UInt32 index);
            const Vec4f               &getFrustumPlanesDistances (const UInt32 index) const;

                  Int32               &editLeft           (void);
                  Int32                getLeft            (void) const;

                  Int32               &editBottom         (void);
                  Int32                getBottom          (void) const;

                  Int32               &editWidth          (void);
                  Int32                getWidth           (void) const;

                  Int32               &editHeight         (void);
                  Int32                getHeight          (void) const;

                  bool                &editIsOrthographicCamera(void);
                  bool                 getIsOrthographicCamera (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setFrustDispDatUBOChunk(UniformBufferObjStd140Chunk * const value);
            void setCullDispDatUBOChunk(UniformBufferObjStd140Chunk * const value);
            void setCullClusterDatUBOChunk(UniformBufferObjStd140Chunk * const value);
            void setCullLightIndexCounterSSBOChunk(ShaderStorageBufferObjStdLayoutChunk * const value);
            void setFrustumsSSBOChunk(ShaderStorageBufferObjStdLayoutChunk * const value);
            void setAffectedLightIndexListSSBOChunk(ShaderStorageBufferObjStdLayoutChunk * const value);
            void setLightIndexListSSBOChunk(ShaderStorageBufferObjStdLayoutChunk * const value);
            void setFrustChunkMat  (ChunkMaterial * const value);
            void setCullChunkMat   (ChunkMaterial * const value);
            void setLightGridImage (Image * const value);
            void setLightGridTexObjChunk(TextureObjChunk * const value);
            void setLightGridTexImgChunkCS(TextureImageChunk * const value);
            void setLightGridTexImgChunkFS(TextureImageChunk * const value);
            void setLeft           (const Int32 value);
            void setBottom         (const Int32 value);
            void setWidth          (const Int32 value);
            void setHeight         (const Int32 value);
            void setIsOrthographicCamera(const bool value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr Field Set                                 */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual SizeT  getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  ClusterShadingStageDataTransitPtr  create          (void);
    static  ClusterShadingStageData           *createEmpty     (void);

    static  ClusterShadingStageDataTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  ClusterShadingStageData            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  ClusterShadingStageDataTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFUnrecUniformBufferObjStd140ChunkPtr _sfFrustDispDatUBOChunk;
    SFUnrecUniformBufferObjStd140ChunkPtr _sfCullDispDatUBOChunk;
    SFUnrecUniformBufferObjStd140ChunkPtr _sfCullClusterDatUBOChunk;
    SFUnrecShaderStorageBufferObjStdLayoutChunkPtr _sfCullLightIndexCounterSSBOChunk;
    SFUnrecShaderStorageBufferObjStdLayoutChunkPtr _sfFrustumsSSBOChunk;
    SFUnrecShaderStorageBufferObjStdLayoutChunkPtr _sfAffectedLightIndexListSSBOChunk;
    SFUnrecShaderStorageBufferObjStdLayoutChunkPtr _sfLightIndexListSSBOChunk;
    SFUnrecChunkMaterialPtr _sfFrustChunkMat;
    SFUnrecChunkMaterialPtr _sfCullChunkMat;
    SFUnrecImagePtr   _sfLightGridImage;
    SFUnrecTextureObjChunkPtr _sfLightGridTexObjChunk;
    SFUnrecTextureImageChunkPtr _sfLightGridTexImgChunkCS;
    SFUnrecTextureImageChunkPtr _sfLightGridTexImgChunkFS;
    MFMatrix          _mfFrustumPlanesNormals;
    MFVec4f           _mfFrustumPlanesDistances;
    SFInt32           _sfLeft;
    SFInt32           _sfBottom;
    SFInt32           _sfWidth;
    SFInt32           _sfHeight;
    SFBool            _sfIsOrthographicCamera;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    ClusterShadingStageDataBase(void);
    ClusterShadingStageDataBase(const ClusterShadingStageDataBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~ClusterShadingStageDataBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */

    void onCreate(const ClusterShadingStageData *source = NULL);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

     GetFieldHandlePtr  getHandleFrustDispDatUBOChunk (void) const;
     EditFieldHandlePtr editHandleFrustDispDatUBOChunk(void);
     GetFieldHandlePtr  getHandleCullDispDatUBOChunk (void) const;
     EditFieldHandlePtr editHandleCullDispDatUBOChunk(void);
     GetFieldHandlePtr  getHandleCullClusterDatUBOChunk (void) const;
     EditFieldHandlePtr editHandleCullClusterDatUBOChunk(void);
     GetFieldHandlePtr  getHandleCullLightIndexCounterSSBOChunk (void) const;
     EditFieldHandlePtr editHandleCullLightIndexCounterSSBOChunk(void);
     GetFieldHandlePtr  getHandleFrustumsSSBOChunk (void) const;
     EditFieldHandlePtr editHandleFrustumsSSBOChunk(void);
     GetFieldHandlePtr  getHandleAffectedLightIndexListSSBOChunk (void) const;
     EditFieldHandlePtr editHandleAffectedLightIndexListSSBOChunk(void);
     GetFieldHandlePtr  getHandleLightIndexListSSBOChunk (void) const;
     EditFieldHandlePtr editHandleLightIndexListSSBOChunk(void);
     GetFieldHandlePtr  getHandleFrustChunkMat   (void) const;
     EditFieldHandlePtr editHandleFrustChunkMat  (void);
     GetFieldHandlePtr  getHandleCullChunkMat    (void) const;
     EditFieldHandlePtr editHandleCullChunkMat   (void);
     GetFieldHandlePtr  getHandleLightGridImage  (void) const;
     EditFieldHandlePtr editHandleLightGridImage (void);
     GetFieldHandlePtr  getHandleLightGridTexObjChunk (void) const;
     EditFieldHandlePtr editHandleLightGridTexObjChunk(void);
     GetFieldHandlePtr  getHandleLightGridTexImgChunkCS (void) const;
     EditFieldHandlePtr editHandleLightGridTexImgChunkCS(void);
     GetFieldHandlePtr  getHandleLightGridTexImgChunkFS (void) const;
     EditFieldHandlePtr editHandleLightGridTexImgChunkFS(void);
     GetFieldHandlePtr  getHandleFrustumPlanesNormals (void) const;
     EditFieldHandlePtr editHandleFrustumPlanesNormals(void);
     GetFieldHandlePtr  getHandleFrustumPlanesDistances (void) const;
     EditFieldHandlePtr editHandleFrustumPlanesDistances(void);
     GetFieldHandlePtr  getHandleLeft            (void) const;
     EditFieldHandlePtr editHandleLeft           (void);
     GetFieldHandlePtr  getHandleBottom          (void) const;
     EditFieldHandlePtr editHandleBottom         (void);
     GetFieldHandlePtr  getHandleWidth           (void) const;
     EditFieldHandlePtr editHandleWidth          (void);
     GetFieldHandlePtr  getHandleHeight          (void) const;
     EditFieldHandlePtr editHandleHeight         (void);
     GetFieldHandlePtr  getHandleIsOrthographicCamera (void) const;
     EditFieldHandlePtr editHandleIsOrthographicCamera(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      ClusterShadingStageDataBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const ClusterShadingStageDataBase &source);
};

typedef ClusterShadingStageDataBase *ClusterShadingStageDataBaseP;

OSG_END_NAMESPACE

#endif /* _OSGCLUSTERSHADINGSTAGEDATABASE_H_ */
